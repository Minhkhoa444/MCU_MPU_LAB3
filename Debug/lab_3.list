
lab_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019b4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001ac0  08001ac0  00011ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ae4  08001ae4  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08001ae4  08001ae4  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ae4  08001ae4  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ae4  08001ae4  00011ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ae8  08001ae8  00011ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08001aec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000024  08001b10  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08001b10  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c771  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000202f  00000000  00000000  0002c7be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00008722  00000000  00000000  0002e7ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007c0  00000000  00000000  00036f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fe8  00000000  00000000  000376d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016732  00000000  00000000  000386b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dbc6  00000000  00000000  0004edea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00081f9b  00000000  00000000  0005c9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000de94b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001898  00000000  00000000  000de9a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	08001aa8 	.word	0x08001aa8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	08001aa8 	.word	0x08001aa8

0800014c <mode_switch_fsm>:
        state = INIT;
    }
}


void mode_switch_fsm(void) {
 800014c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch(state) {
 800014e:	4ca0      	ldr	r4, [pc, #640]	; (80003d0 <mode_switch_fsm+0x284>)
 8000150:	7823      	ldrb	r3, [r4, #0]
 8000152:	2b07      	cmp	r3, #7
 8000154:	d846      	bhi.n	80001e4 <mode_switch_fsm+0x98>
 8000156:	e8df f013 	tbh	[pc, r3, lsl #1]
 800015a:	0046      	.short	0x0046
 800015c:	00ab0072 	.word	0x00ab0072
 8000160:	010900db 	.word	0x010900db
 8000164:	01ac0155 	.word	0x01ac0155
 8000168:	0008      	.short	0x0008
    seven_seg_buffer = (buffer_wrapper_t){{green_light_duration_temp / 10, 4, green_light_duration_temp % 10, 4}};
 800016a:	2704      	movs	r7, #4
    green_light_duration_temp = green_light_duration;
 800016c:	4d99      	ldr	r5, [pc, #612]	; (80003d4 <mode_switch_fsm+0x288>)
    seven_seg_buffer = (buffer_wrapper_t){{green_light_duration_temp / 10, 4, green_light_duration_temp % 10, 4}};
 800016e:	489a      	ldr	r0, [pc, #616]	; (80003d8 <mode_switch_fsm+0x28c>)
    green_light_duration_temp = green_light_duration;
 8000170:	6829      	ldr	r1, [r5, #0]
    if(timer4_flag) {
 8000172:	4e9a      	ldr	r6, [pc, #616]	; (80003dc <mode_switch_fsm+0x290>)
    seven_seg_buffer = (buffer_wrapper_t){{green_light_duration_temp / 10, 4, green_light_duration_temp % 10, 4}};
 8000174:	fb80 3001 	smull	r3, r0, r0, r1
 8000178:	17cb      	asrs	r3, r1, #31
 800017a:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
 800017e:	4a98      	ldr	r2, [pc, #608]	; (80003e0 <mode_switch_fsm+0x294>)
    if(timer4_flag) {
 8000180:	f8d6 c000 	ldr.w	ip, [r6]
    seven_seg_buffer = (buffer_wrapper_t){{green_light_duration_temp / 10, 4, green_light_duration_temp % 10, 4}};
 8000184:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    green_light_duration_temp = green_light_duration;
 8000188:	4e96      	ldr	r6, [pc, #600]	; (80003e4 <mode_switch_fsm+0x298>)
    seven_seg_buffer = (buffer_wrapper_t){{green_light_duration_temp / 10, 4, green_light_duration_temp % 10, 4}};
 800018a:	eba1 0040 	sub.w	r0, r1, r0, lsl #1
 800018e:	6090      	str	r0, [r2, #8]
 8000190:	6013      	str	r3, [r2, #0]
 8000192:	6057      	str	r7, [r2, #4]
    green_light_duration_temp = green_light_duration;
 8000194:	6031      	str	r1, [r6, #0]
    seven_seg_buffer = (buffer_wrapper_t){{green_light_duration_temp / 10, 4, green_light_duration_temp % 10, 4}};
 8000196:	60d7      	str	r7, [r2, #12]
    if(timer4_flag) {
 8000198:	f1bc 0f00 	cmp.w	ip, #0
 800019c:	f040 8258 	bne.w	8000650 <mode_switch_fsm+0x504>
    if(timer5_flag) {
 80001a0:	4b91      	ldr	r3, [pc, #580]	; (80003e8 <mode_switch_fsm+0x29c>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	f040 8240 	bne.w	800062a <mode_switch_fsm+0x4de>
    if(is_button_pressed(0)) {
 80001aa:	2000      	movs	r0, #0
 80001ac:	f000 fb3e 	bl	800082c <is_button_pressed>
 80001b0:	b108      	cbz	r0, 80001b6 <mode_switch_fsm+0x6a>
        state = INIT;
 80001b2:	2300      	movs	r3, #0
 80001b4:	7023      	strb	r3, [r4, #0]
    if(is_button_pressed(1)) {
 80001b6:	2001      	movs	r0, #1
 80001b8:	f000 fb38 	bl	800082c <is_button_pressed>
 80001bc:	b128      	cbz	r0, 80001ca <mode_switch_fsm+0x7e>
        green_light_duration_temp += 1;
 80001be:	6833      	ldr	r3, [r6, #0]
 80001c0:	3301      	adds	r3, #1
        if(green_light_duration_temp > 99) green_light_duration_temp = 1;
 80001c2:	2b63      	cmp	r3, #99	; 0x63
 80001c4:	bfc8      	it	gt
 80001c6:	2301      	movgt	r3, #1
 80001c8:	6033      	str	r3, [r6, #0]
    if(is_button_pressed(2)) {
 80001ca:	2002      	movs	r0, #2
 80001cc:	f000 fb2e 	bl	800082c <is_button_pressed>
 80001d0:	b140      	cbz	r0, 80001e4 <mode_switch_fsm+0x98>
        state = INIT;
 80001d2:	2100      	movs	r1, #0
        red_light_duration = green_light_duration + yellow_light_duration;
 80001d4:	4b85      	ldr	r3, [pc, #532]	; (80003ec <mode_switch_fsm+0x2a0>)
        green_light_duration = green_light_duration_temp;
 80001d6:	6832      	ldr	r2, [r6, #0]
        red_light_duration = green_light_duration + yellow_light_duration;
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4885      	ldr	r0, [pc, #532]	; (80003f0 <mode_switch_fsm+0x2a4>)
 80001dc:	4413      	add	r3, r2
        green_light_duration = green_light_duration_temp;
 80001de:	602a      	str	r2, [r5, #0]
        red_light_duration = green_light_duration + yellow_light_duration;
 80001e0:	6003      	str	r3, [r0, #0]
        state = INIT;
 80001e2:	7021      	strb	r1, [r4, #0]
        mode_4();
        break;
    default:
        break;
    }
}
 80001e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_3, GPIO_PIN_RESET);
 80001e6:	2200      	movs	r2, #0
 80001e8:	2109      	movs	r1, #9
 80001ea:	4882      	ldr	r0, [pc, #520]	; (80003f4 <mode_switch_fsm+0x2a8>)
 80001ec:	f000 ff34 	bl	8001058 <HAL_GPIO_WritePin>
        setTimer1(timer_scaler(green_light_duration * 1000, interrupt_period));
 80001f0:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_SET);
 80001f4:	2201      	movs	r2, #1
 80001f6:	2136      	movs	r1, #54	; 0x36
 80001f8:	487e      	ldr	r0, [pc, #504]	; (80003f4 <mode_switch_fsm+0x2a8>)
 80001fa:	f000 ff2d 	bl	8001058 <HAL_GPIO_WritePin>
        state = RED_GREEN;
 80001fe:	2301      	movs	r3, #1
        setTimer1(timer_scaler(green_light_duration * 1000, interrupt_period));
 8000200:	4d74      	ldr	r5, [pc, #464]	; (80003d4 <mode_switch_fsm+0x288>)
 8000202:	210a      	movs	r1, #10
 8000204:	6828      	ldr	r0, [r5, #0]
        state = RED_GREEN;
 8000206:	7023      	strb	r3, [r4, #0]
        setTimer1(timer_scaler(green_light_duration * 1000, interrupt_period));
 8000208:	fb06 f000 	mul.w	r0, r6, r0
 800020c:	f000 fc64 	bl	8000ad8 <timer_scaler>
 8000210:	f000 fc66 	bl	8000ae0 <setTimer1>
        setTimer2(timer_scaler(1000, interrupt_period));
 8000214:	210a      	movs	r1, #10
 8000216:	4630      	mov	r0, r6
 8000218:	f000 fc5e 	bl	8000ad8 <timer_scaler>
 800021c:	f000 fc6a 	bl	8000af4 <setTimer2>
        setTimer3(timer_scaler(200, interrupt_period));
 8000220:	210a      	movs	r1, #10
 8000222:	20c8      	movs	r0, #200	; 0xc8
 8000224:	f000 fc58 	bl	8000ad8 <timer_scaler>
 8000228:	f000 fc6e 	bl	8000b08 <setTimer3>
        seven_seg_buffer = (buffer_wrapper_t){{red_light_duration, green_light_duration, red_light_duration, green_light_duration}};
 800022c:	4a70      	ldr	r2, [pc, #448]	; (80003f0 <mode_switch_fsm+0x2a4>)
 800022e:	4b6c      	ldr	r3, [pc, #432]	; (80003e0 <mode_switch_fsm+0x294>)
 8000230:	6829      	ldr	r1, [r5, #0]
 8000232:	6812      	ldr	r2, [r2, #0]
 8000234:	6059      	str	r1, [r3, #4]
 8000236:	60d9      	str	r1, [r3, #12]
 8000238:	601a      	str	r2, [r3, #0]
 800023a:	609a      	str	r2, [r3, #8]
}
 800023c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_3, GPIO_PIN_RESET);
 800023e:	2200      	movs	r2, #0
 8000240:	2109      	movs	r1, #9
 8000242:	486c      	ldr	r0, [pc, #432]	; (80003f4 <mode_switch_fsm+0x2a8>)
 8000244:	f000 ff08 	bl	8001058 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_SET);
 8000248:	2201      	movs	r2, #1
 800024a:	2136      	movs	r1, #54	; 0x36
 800024c:	4869      	ldr	r0, [pc, #420]	; (80003f4 <mode_switch_fsm+0x2a8>)
 800024e:	f000 ff03 	bl	8001058 <HAL_GPIO_WritePin>
    if(timer1_flag) {
 8000252:	4b69      	ldr	r3, [pc, #420]	; (80003f8 <mode_switch_fsm+0x2ac>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	f040 81aa 	bne.w	80005b0 <mode_switch_fsm+0x464>
    if(timer2_flag) {
 800025c:	4b67      	ldr	r3, [pc, #412]	; (80003fc <mode_switch_fsm+0x2b0>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	2b00      	cmp	r3, #0
 8000262:	f040 8190 	bne.w	8000586 <mode_switch_fsm+0x43a>
    if(timer3_flag) {
 8000266:	4b66      	ldr	r3, [pc, #408]	; (8000400 <mode_switch_fsm+0x2b4>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	2b00      	cmp	r3, #0
 800026c:	f040 8178 	bne.w	8000560 <mode_switch_fsm+0x414>
    if(is_button_pressed(0)) {
 8000270:	2000      	movs	r0, #0
 8000272:	f000 fadb 	bl	800082c <is_button_pressed>
 8000276:	2800      	cmp	r0, #0
 8000278:	d0b4      	beq.n	80001e4 <mode_switch_fsm+0x98>
        setTimer4(timer_scaler(500, interrupt_period));
 800027a:	210a      	movs	r1, #10
 800027c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000280:	f000 fc2a 	bl	8000ad8 <timer_scaler>
 8000284:	f000 fc4a 	bl	8000b1c <setTimer4>
        setTimer5(timer_scaler(250, interrupt_period));
 8000288:	210a      	movs	r1, #10
 800028a:	20fa      	movs	r0, #250	; 0xfa
 800028c:	f000 fc24 	bl	8000ad8 <timer_scaler>
 8000290:	f000 fc4e 	bl	8000b30 <setTimer5>
        state = MAN_RED;
 8000294:	2305      	movs	r3, #5
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 8000296:	2200      	movs	r2, #0
 8000298:	2103      	movs	r1, #3
 800029a:	4856      	ldr	r0, [pc, #344]	; (80003f4 <mode_switch_fsm+0x2a8>)
        state = MAN_RED;
 800029c:	7023      	strb	r3, [r4, #0]
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 800029e:	f000 fedb 	bl	8001058 <HAL_GPIO_WritePin>
}
 80002a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_SET);
 80002a6:	2201      	movs	r2, #1
 80002a8:	213c      	movs	r1, #60	; 0x3c
 80002aa:	4852      	ldr	r0, [pc, #328]	; (80003f4 <mode_switch_fsm+0x2a8>)
 80002ac:	f000 bed4 	b.w	8001058 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_5, GPIO_PIN_RESET);
 80002b0:	2200      	movs	r2, #0
 80002b2:	2121      	movs	r1, #33	; 0x21
 80002b4:	484f      	ldr	r0, [pc, #316]	; (80003f4 <mode_switch_fsm+0x2a8>)
 80002b6:	f000 fecf 	bl	8001058 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_SET);
 80002ba:	2201      	movs	r2, #1
 80002bc:	211e      	movs	r1, #30
 80002be:	484d      	ldr	r0, [pc, #308]	; (80003f4 <mode_switch_fsm+0x2a8>)
 80002c0:	f000 feca 	bl	8001058 <HAL_GPIO_WritePin>
    if(timer1_flag) {
 80002c4:	4b4c      	ldr	r3, [pc, #304]	; (80003f8 <mode_switch_fsm+0x2ac>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d0c7      	beq.n	800025c <mode_switch_fsm+0x110>
        setTimer1(timer_scaler(green_light_duration * 1000, interrupt_period));
 80002cc:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80002d0:	4d40      	ldr	r5, [pc, #256]	; (80003d4 <mode_switch_fsm+0x288>)
 80002d2:	210a      	movs	r1, #10
 80002d4:	6828      	ldr	r0, [r5, #0]
 80002d6:	fb06 f000 	mul.w	r0, r6, r0
 80002da:	f000 fbfd 	bl	8000ad8 <timer_scaler>
 80002de:	f000 fbff 	bl	8000ae0 <setTimer1>
        setTimer2(timer_scaler(1000, interrupt_period));
 80002e2:	210a      	movs	r1, #10
 80002e4:	4630      	mov	r0, r6
 80002e6:	f000 fbf7 	bl	8000ad8 <timer_scaler>
 80002ea:	f000 fc03 	bl	8000af4 <setTimer2>
        setTimer3(timer_scaler(250, interrupt_period));
 80002ee:	210a      	movs	r1, #10
 80002f0:	20fa      	movs	r0, #250	; 0xfa
 80002f2:	f000 fbf1 	bl	8000ad8 <timer_scaler>
 80002f6:	f000 fc07 	bl	8000b08 <setTimer3>
        state = GREEN_RED;
 80002fa:	2003      	movs	r0, #3
        seven_seg_buffer = (buffer_wrapper_t){{green_light_duration, red_light_duration, green_light_duration, red_light_duration}};
 80002fc:	4a3c      	ldr	r2, [pc, #240]	; (80003f0 <mode_switch_fsm+0x2a4>)
 80002fe:	4b38      	ldr	r3, [pc, #224]	; (80003e0 <mode_switch_fsm+0x294>)
 8000300:	6829      	ldr	r1, [r5, #0]
 8000302:	6812      	ldr	r2, [r2, #0]
 8000304:	6019      	str	r1, [r3, #0]
 8000306:	e9c3 2101 	strd	r2, r1, [r3, #4]
 800030a:	60da      	str	r2, [r3, #12]
        state = GREEN_RED;
 800030c:	7020      	strb	r0, [r4, #0]
        seven_seg_buffer = (buffer_wrapper_t){{green_light_duration, red_light_duration, green_light_duration, red_light_duration}};
 800030e:	e7a5      	b.n	800025c <mode_switch_fsm+0x110>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 | GPIO_PIN_2, GPIO_PIN_RESET);
 8000310:	2200      	movs	r2, #0
 8000312:	2106      	movs	r1, #6
 8000314:	4837      	ldr	r0, [pc, #220]	; (80003f4 <mode_switch_fsm+0x2a8>)
 8000316:	f000 fe9f 	bl	8001058 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_SET);
 800031a:	2201      	movs	r2, #1
 800031c:	2139      	movs	r1, #57	; 0x39
 800031e:	4835      	ldr	r0, [pc, #212]	; (80003f4 <mode_switch_fsm+0x2a8>)
 8000320:	f000 fe9a 	bl	8001058 <HAL_GPIO_WritePin>
    if(timer1_flag) {
 8000324:	4b34      	ldr	r3, [pc, #208]	; (80003f8 <mode_switch_fsm+0x2ac>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d097      	beq.n	800025c <mode_switch_fsm+0x110>
        setTimer1(timer_scaler(yellow_light_duration * 1000, interrupt_period));
 800032c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8000330:	4d2e      	ldr	r5, [pc, #184]	; (80003ec <mode_switch_fsm+0x2a0>)
 8000332:	210a      	movs	r1, #10
 8000334:	6828      	ldr	r0, [r5, #0]
 8000336:	fb06 f000 	mul.w	r0, r6, r0
 800033a:	f000 fbcd 	bl	8000ad8 <timer_scaler>
 800033e:	f000 fbcf 	bl	8000ae0 <setTimer1>
        setTimer2(timer_scaler(1000, interrupt_period));
 8000342:	210a      	movs	r1, #10
 8000344:	4630      	mov	r0, r6
 8000346:	f000 fbc7 	bl	8000ad8 <timer_scaler>
 800034a:	f000 fbd3 	bl	8000af4 <setTimer2>
        setTimer3(timer_scaler(250, interrupt_period));
 800034e:	210a      	movs	r1, #10
 8000350:	20fa      	movs	r0, #250	; 0xfa
 8000352:	f000 fbc1 	bl	8000ad8 <timer_scaler>
 8000356:	f000 fbd7 	bl	8000b08 <setTimer3>
        state = YELLOW_RED;
 800035a:	2104      	movs	r1, #4
        seven_seg_buffer = (buffer_wrapper_t){{yellow_light_duration, yellow_light_duration, yellow_light_duration, yellow_light_duration}};
 800035c:	682a      	ldr	r2, [r5, #0]
 800035e:	4b20      	ldr	r3, [pc, #128]	; (80003e0 <mode_switch_fsm+0x294>)
        state = YELLOW_RED;
 8000360:	7021      	strb	r1, [r4, #0]
        seven_seg_buffer = (buffer_wrapper_t){{yellow_light_duration, yellow_light_duration, yellow_light_duration, yellow_light_duration}};
 8000362:	e9c3 2200 	strd	r2, r2, [r3]
 8000366:	e9c3 2202 	strd	r2, r2, [r3, #8]
 800036a:	e777      	b.n	800025c <mode_switch_fsm+0x110>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 | GPIO_PIN_4, GPIO_PIN_RESET);
 800036c:	2200      	movs	r2, #0
 800036e:	2112      	movs	r1, #18
 8000370:	4820      	ldr	r0, [pc, #128]	; (80003f4 <mode_switch_fsm+0x2a8>)
 8000372:	f000 fe71 	bl	8001058 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5, GPIO_PIN_SET);
 8000376:	2201      	movs	r2, #1
 8000378:	212d      	movs	r1, #45	; 0x2d
 800037a:	481e      	ldr	r0, [pc, #120]	; (80003f4 <mode_switch_fsm+0x2a8>)
 800037c:	f000 fe6c 	bl	8001058 <HAL_GPIO_WritePin>
    if(timer1_flag) {
 8000380:	4b1d      	ldr	r3, [pc, #116]	; (80003f8 <mode_switch_fsm+0x2ac>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	2b00      	cmp	r3, #0
 8000386:	f43f af69 	beq.w	800025c <mode_switch_fsm+0x110>
        setTimer1(timer_scaler(green_light_duration * 1000, interrupt_period));
 800038a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 800038e:	4d11      	ldr	r5, [pc, #68]	; (80003d4 <mode_switch_fsm+0x288>)
 8000390:	210a      	movs	r1, #10
 8000392:	6828      	ldr	r0, [r5, #0]
 8000394:	fb06 f000 	mul.w	r0, r6, r0
 8000398:	f000 fb9e 	bl	8000ad8 <timer_scaler>
 800039c:	f000 fba0 	bl	8000ae0 <setTimer1>
        setTimer2(timer_scaler(1000, interrupt_period));
 80003a0:	210a      	movs	r1, #10
 80003a2:	4630      	mov	r0, r6
 80003a4:	f000 fb98 	bl	8000ad8 <timer_scaler>
 80003a8:	f000 fba4 	bl	8000af4 <setTimer2>
        setTimer3(timer_scaler(250, interrupt_period));
 80003ac:	210a      	movs	r1, #10
 80003ae:	20fa      	movs	r0, #250	; 0xfa
 80003b0:	f000 fb92 	bl	8000ad8 <timer_scaler>
 80003b4:	f000 fba8 	bl	8000b08 <setTimer3>
        state = RED_GREEN;
 80003b8:	2001      	movs	r0, #1
        seven_seg_buffer = (buffer_wrapper_t){{red_light_duration, green_light_duration, red_light_duration, green_light_duration}};
 80003ba:	4a0d      	ldr	r2, [pc, #52]	; (80003f0 <mode_switch_fsm+0x2a4>)
 80003bc:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <mode_switch_fsm+0x294>)
 80003be:	6829      	ldr	r1, [r5, #0]
 80003c0:	6812      	ldr	r2, [r2, #0]
 80003c2:	6059      	str	r1, [r3, #4]
 80003c4:	60d9      	str	r1, [r3, #12]
 80003c6:	601a      	str	r2, [r3, #0]
 80003c8:	609a      	str	r2, [r3, #8]
        state = RED_GREEN;
 80003ca:	7020      	strb	r0, [r4, #0]
        seven_seg_buffer = (buffer_wrapper_t){{red_light_duration, green_light_duration, red_light_duration, green_light_duration}};
 80003cc:	e746      	b.n	800025c <mode_switch_fsm+0x110>
 80003ce:	bf00      	nop
 80003d0:	20000051 	.word	0x20000051
 80003d4:	20000000 	.word	0x20000000
 80003d8:	66666667 	.word	0x66666667
 80003dc:	20000088 	.word	0x20000088
 80003e0:	20000040 	.word	0x20000040
 80003e4:	20000004 	.word	0x20000004
 80003e8:	20000090 	.word	0x20000090
 80003ec:	20000010 	.word	0x20000010
 80003f0:	20000008 	.word	0x20000008
 80003f4:	40010800 	.word	0x40010800
 80003f8:	20000070 	.word	0x20000070
 80003fc:	20000078 	.word	0x20000078
 8000400:	20000080 	.word	0x20000080
    seven_seg_buffer = (buffer_wrapper_t){{red_light_duration_temp / 10, 2, red_light_duration_temp % 10, 2}};
 8000404:	2702      	movs	r7, #2
    red_light_duration_temp = red_light_duration;
 8000406:	4dc7      	ldr	r5, [pc, #796]	; (8000724 <mode_switch_fsm+0x5d8>)
    seven_seg_buffer = (buffer_wrapper_t){{red_light_duration_temp / 10, 2, red_light_duration_temp % 10, 2}};
 8000408:	48c7      	ldr	r0, [pc, #796]	; (8000728 <mode_switch_fsm+0x5dc>)
    red_light_duration_temp = red_light_duration;
 800040a:	6829      	ldr	r1, [r5, #0]
    if(timer4_flag) {
 800040c:	4ec7      	ldr	r6, [pc, #796]	; (800072c <mode_switch_fsm+0x5e0>)
    seven_seg_buffer = (buffer_wrapper_t){{red_light_duration_temp / 10, 2, red_light_duration_temp % 10, 2}};
 800040e:	fb80 3001 	smull	r3, r0, r0, r1
 8000412:	17cb      	asrs	r3, r1, #31
 8000414:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
 8000418:	4ac5      	ldr	r2, [pc, #788]	; (8000730 <mode_switch_fsm+0x5e4>)
    if(timer4_flag) {
 800041a:	f8d6 c000 	ldr.w	ip, [r6]
    seven_seg_buffer = (buffer_wrapper_t){{red_light_duration_temp / 10, 2, red_light_duration_temp % 10, 2}};
 800041e:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    red_light_duration_temp = red_light_duration;
 8000422:	4ec4      	ldr	r6, [pc, #784]	; (8000734 <mode_switch_fsm+0x5e8>)
    seven_seg_buffer = (buffer_wrapper_t){{red_light_duration_temp / 10, 2, red_light_duration_temp % 10, 2}};
 8000424:	eba1 0040 	sub.w	r0, r1, r0, lsl #1
 8000428:	6090      	str	r0, [r2, #8]
 800042a:	6013      	str	r3, [r2, #0]
 800042c:	6057      	str	r7, [r2, #4]
    red_light_duration_temp = red_light_duration;
 800042e:	6031      	str	r1, [r6, #0]
    seven_seg_buffer = (buffer_wrapper_t){{red_light_duration_temp / 10, 2, red_light_duration_temp % 10, 2}};
 8000430:	60d7      	str	r7, [r2, #12]
    if(timer4_flag) {
 8000432:	f1bc 0f00 	cmp.w	ip, #0
 8000436:	f040 80e7 	bne.w	8000608 <mode_switch_fsm+0x4bc>
    if(timer5_flag) {
 800043a:	4bbf      	ldr	r3, [pc, #764]	; (8000738 <mode_switch_fsm+0x5ec>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	2b00      	cmp	r3, #0
 8000440:	f040 80cf 	bne.w	80005e2 <mode_switch_fsm+0x496>
    if(is_button_pressed(0)) {
 8000444:	2000      	movs	r0, #0
 8000446:	f000 f9f1 	bl	800082c <is_button_pressed>
 800044a:	2800      	cmp	r0, #0
 800044c:	f040 812b 	bne.w	80006a6 <mode_switch_fsm+0x55a>
    if(is_button_pressed(1)) {
 8000450:	2001      	movs	r0, #1
 8000452:	f000 f9eb 	bl	800082c <is_button_pressed>
 8000456:	b128      	cbz	r0, 8000464 <mode_switch_fsm+0x318>
        red_light_duration_temp += 1;
 8000458:	6833      	ldr	r3, [r6, #0]
 800045a:	3301      	adds	r3, #1
        if(red_light_duration_temp > 99) red_light_duration_temp = 1;
 800045c:	2b63      	cmp	r3, #99	; 0x63
 800045e:	bfc8      	it	gt
 8000460:	2301      	movgt	r3, #1
 8000462:	6033      	str	r3, [r6, #0]
    if(is_button_pressed(2)) {
 8000464:	2002      	movs	r0, #2
 8000466:	f000 f9e1 	bl	800082c <is_button_pressed>
 800046a:	2800      	cmp	r0, #0
 800046c:	f43f aeba 	beq.w	80001e4 <mode_switch_fsm+0x98>
        green_light_duration = red_light_duration - yellow_light_duration;
 8000470:	4bb2      	ldr	r3, [pc, #712]	; (800073c <mode_switch_fsm+0x5f0>)
        red_light_duration = red_light_duration_temp;
 8000472:	6832      	ldr	r2, [r6, #0]
        green_light_duration = red_light_duration - yellow_light_duration;
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4eb2      	ldr	r6, [pc, #712]	; (8000740 <mode_switch_fsm+0x5f4>)
 8000478:	1ad3      	subs	r3, r2, r3
        setTimer4(timer_scaler(500, interrupt_period));
 800047a:	210a      	movs	r1, #10
 800047c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
        green_light_duration = red_light_duration - yellow_light_duration;
 8000480:	6033      	str	r3, [r6, #0]
        red_light_duration = red_light_duration_temp;
 8000482:	602a      	str	r2, [r5, #0]
        setTimer4(timer_scaler(500, interrupt_period));
 8000484:	f000 fb28 	bl	8000ad8 <timer_scaler>
 8000488:	f000 fb48 	bl	8000b1c <setTimer4>
        setTimer5(timer_scaler(250, interrupt_period));
 800048c:	210a      	movs	r1, #10
 800048e:	20fa      	movs	r0, #250	; 0xfa
 8000490:	f000 fb22 	bl	8000ad8 <timer_scaler>
 8000494:	f000 fb4c 	bl	8000b30 <setTimer5>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 8000498:	2200      	movs	r2, #0
 800049a:	2130      	movs	r1, #48	; 0x30
 800049c:	48a9      	ldr	r0, [pc, #676]	; (8000744 <mode_switch_fsm+0x5f8>)
 800049e:	f000 fddb 	bl	8001058 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_SET);
 80004a2:	2201      	movs	r2, #1
 80004a4:	210f      	movs	r1, #15
 80004a6:	48a7      	ldr	r0, [pc, #668]	; (8000744 <mode_switch_fsm+0x5f8>)
 80004a8:	f000 fdd6 	bl	8001058 <HAL_GPIO_WritePin>
        state = MAN_YELLOW;
 80004ac:	2306      	movs	r3, #6
 80004ae:	7023      	strb	r3, [r4, #0]
}
 80004b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    seven_seg_buffer = (buffer_wrapper_t){{yellow_light_duration_temp / 10, 3, yellow_light_duration_temp % 10, 3}};
 80004b2:	2703      	movs	r7, #3
    yellow_light_duration_temp = yellow_light_duration;
 80004b4:	4da1      	ldr	r5, [pc, #644]	; (800073c <mode_switch_fsm+0x5f0>)
    seven_seg_buffer = (buffer_wrapper_t){{yellow_light_duration_temp / 10, 3, yellow_light_duration_temp % 10, 3}};
 80004b6:	489c      	ldr	r0, [pc, #624]	; (8000728 <mode_switch_fsm+0x5dc>)
    yellow_light_duration_temp = yellow_light_duration;
 80004b8:	6829      	ldr	r1, [r5, #0]
    if(timer4_flag) {
 80004ba:	4e9c      	ldr	r6, [pc, #624]	; (800072c <mode_switch_fsm+0x5e0>)
    seven_seg_buffer = (buffer_wrapper_t){{yellow_light_duration_temp / 10, 3, yellow_light_duration_temp % 10, 3}};
 80004bc:	fb80 3001 	smull	r3, r0, r0, r1
 80004c0:	17cb      	asrs	r3, r1, #31
 80004c2:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
 80004c6:	4a9a      	ldr	r2, [pc, #616]	; (8000730 <mode_switch_fsm+0x5e4>)
    if(timer4_flag) {
 80004c8:	f8d6 c000 	ldr.w	ip, [r6]
    seven_seg_buffer = (buffer_wrapper_t){{yellow_light_duration_temp / 10, 3, yellow_light_duration_temp % 10, 3}};
 80004cc:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    yellow_light_duration_temp = yellow_light_duration;
 80004d0:	4e9d      	ldr	r6, [pc, #628]	; (8000748 <mode_switch_fsm+0x5fc>)
    seven_seg_buffer = (buffer_wrapper_t){{yellow_light_duration_temp / 10, 3, yellow_light_duration_temp % 10, 3}};
 80004d2:	eba1 0040 	sub.w	r0, r1, r0, lsl #1
 80004d6:	6090      	str	r0, [r2, #8]
 80004d8:	6013      	str	r3, [r2, #0]
 80004da:	6057      	str	r7, [r2, #4]
    yellow_light_duration_temp = yellow_light_duration;
 80004dc:	6031      	str	r1, [r6, #0]
    seven_seg_buffer = (buffer_wrapper_t){{yellow_light_duration_temp / 10, 3, yellow_light_duration_temp % 10, 3}};
 80004de:	60d7      	str	r7, [r2, #12]
    if(timer4_flag) {
 80004e0:	f1bc 0f00 	cmp.w	ip, #0
 80004e4:	f040 810c 	bne.w	8000700 <mode_switch_fsm+0x5b4>
    if(timer5_flag) {
 80004e8:	4b93      	ldr	r3, [pc, #588]	; (8000738 <mode_switch_fsm+0x5ec>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	f040 80f4 	bne.w	80006da <mode_switch_fsm+0x58e>
    if(is_button_pressed(0)) {
 80004f2:	2000      	movs	r0, #0
 80004f4:	f000 f99a 	bl	800082c <is_button_pressed>
 80004f8:	2800      	cmp	r0, #0
 80004fa:	f040 80ba 	bne.w	8000672 <mode_switch_fsm+0x526>
    if(is_button_pressed(1)) {
 80004fe:	2001      	movs	r0, #1
 8000500:	f000 f994 	bl	800082c <is_button_pressed>
 8000504:	b128      	cbz	r0, 8000512 <mode_switch_fsm+0x3c6>
        yellow_light_duration_temp += 1;
 8000506:	6833      	ldr	r3, [r6, #0]
 8000508:	3301      	adds	r3, #1
        if(yellow_light_duration_temp > 99) yellow_light_duration_temp = 1;
 800050a:	2b63      	cmp	r3, #99	; 0x63
 800050c:	bfc8      	it	gt
 800050e:	2301      	movgt	r3, #1
 8000510:	6033      	str	r3, [r6, #0]
    if(is_button_pressed(2)) {
 8000512:	2002      	movs	r0, #2
 8000514:	f000 f98a 	bl	800082c <is_button_pressed>
 8000518:	2800      	cmp	r0, #0
 800051a:	f43f ae63 	beq.w	80001e4 <mode_switch_fsm+0x98>
        green_light_duration = red_light_duration - yellow_light_duration;
 800051e:	4b81      	ldr	r3, [pc, #516]	; (8000724 <mode_switch_fsm+0x5d8>)
        yellow_light_duration = yellow_light_duration_temp;
 8000520:	6832      	ldr	r2, [r6, #0]
        green_light_duration = red_light_duration - yellow_light_duration;
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4e86      	ldr	r6, [pc, #536]	; (8000740 <mode_switch_fsm+0x5f4>)
 8000526:	1a9b      	subs	r3, r3, r2
        setTimer4(timer_scaler(500, interrupt_period));
 8000528:	210a      	movs	r1, #10
 800052a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
        green_light_duration = red_light_duration - yellow_light_duration;
 800052e:	6033      	str	r3, [r6, #0]
        yellow_light_duration = yellow_light_duration_temp;
 8000530:	602a      	str	r2, [r5, #0]
        setTimer4(timer_scaler(500, interrupt_period));
 8000532:	f000 fad1 	bl	8000ad8 <timer_scaler>
 8000536:	f000 faf1 	bl	8000b1c <setTimer4>
        setTimer5(timer_scaler(250, interrupt_period));
 800053a:	210a      	movs	r1, #10
 800053c:	20fa      	movs	r0, #250	; 0xfa
 800053e:	f000 facb 	bl	8000ad8 <timer_scaler>
 8000542:	f000 faf5 	bl	8000b30 <setTimer5>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	210c      	movs	r1, #12
 800054a:	487e      	ldr	r0, [pc, #504]	; (8000744 <mode_switch_fsm+0x5f8>)
 800054c:	f000 fd84 	bl	8001058 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_SET);
 8000550:	2201      	movs	r2, #1
 8000552:	2133      	movs	r1, #51	; 0x33
 8000554:	487b      	ldr	r0, [pc, #492]	; (8000744 <mode_switch_fsm+0x5f8>)
 8000556:	f000 fd7f 	bl	8001058 <HAL_GPIO_WritePin>
        state = MAN_GREEN;
 800055a:	2307      	movs	r3, #7
 800055c:	7023      	strb	r3, [r4, #0]
}
 800055e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        setTimer3(timer_scaler(250, interrupt_period));
 8000560:	210a      	movs	r1, #10
        update7SEG(seven_seg_index, seven_seg_buffer.buffer);
 8000562:	4d7a      	ldr	r5, [pc, #488]	; (800074c <mode_switch_fsm+0x600>)
        setTimer3(timer_scaler(250, interrupt_period));
 8000564:	20fa      	movs	r0, #250	; 0xfa
 8000566:	f000 fab7 	bl	8000ad8 <timer_scaler>
 800056a:	f000 facd 	bl	8000b08 <setTimer3>
        update7SEG(seven_seg_index, seven_seg_buffer.buffer);
 800056e:	7828      	ldrb	r0, [r5, #0]
 8000570:	496f      	ldr	r1, [pc, #444]	; (8000730 <mode_switch_fsm+0x5e4>)
 8000572:	f000 fa71 	bl	8000a58 <update7SEG>
        seven_seg_index += 1;
 8000576:	782b      	ldrb	r3, [r5, #0]
 8000578:	3301      	adds	r3, #1
 800057a:	b2db      	uxtb	r3, r3
        if(seven_seg_index >= 4) {
 800057c:	2b03      	cmp	r3, #3
            seven_seg_index = 0;
 800057e:	bf88      	it	hi
 8000580:	2300      	movhi	r3, #0
 8000582:	702b      	strb	r3, [r5, #0]
 8000584:	e674      	b.n	8000270 <mode_switch_fsm+0x124>
        setTimer2(timer_scaler(1000, interrupt_period));
 8000586:	210a      	movs	r1, #10
 8000588:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800058c:	f000 faa4 	bl	8000ad8 <timer_scaler>
 8000590:	f000 fab0 	bl	8000af4 <setTimer2>
    buffer->buffer[0] -= 1;
 8000594:	4b66      	ldr	r3, [pc, #408]	; (8000730 <mode_switch_fsm+0x5e4>)
    buffer->buffer[1] -= 1;
 8000596:	e9d3 5000 	ldrd	r5, r0, [r3]
    buffer->buffer[3] -= 1;
 800059a:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
    buffer->buffer[0] -= 1;
 800059e:	3d01      	subs	r5, #1
    buffer->buffer[1] -= 1;
 80005a0:	3801      	subs	r0, #1
    buffer->buffer[2] -= 1;
 80005a2:	3901      	subs	r1, #1
    buffer->buffer[3] -= 1;
 80005a4:	3a01      	subs	r2, #1
    buffer->buffer[1] -= 1;
 80005a6:	e9c3 5000 	strd	r5, r0, [r3]
    buffer->buffer[3] -= 1;
 80005aa:	e9c3 1202 	strd	r1, r2, [r3, #8]
}
 80005ae:	e65a      	b.n	8000266 <mode_switch_fsm+0x11a>
        setTimer1(timer_scaler(yellow_light_duration * 1000, interrupt_period));
 80005b0:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80005b4:	4d61      	ldr	r5, [pc, #388]	; (800073c <mode_switch_fsm+0x5f0>)
 80005b6:	210a      	movs	r1, #10
 80005b8:	6828      	ldr	r0, [r5, #0]
 80005ba:	fb06 f000 	mul.w	r0, r6, r0
 80005be:	f000 fa8b 	bl	8000ad8 <timer_scaler>
 80005c2:	f000 fa8d 	bl	8000ae0 <setTimer1>
        setTimer2(timer_scaler(1000, interrupt_period));
 80005c6:	210a      	movs	r1, #10
 80005c8:	4630      	mov	r0, r6
 80005ca:	f000 fa85 	bl	8000ad8 <timer_scaler>
 80005ce:	f000 fa91 	bl	8000af4 <setTimer2>
        setTimer3(timer_scaler(250, interrupt_period));
 80005d2:	210a      	movs	r1, #10
 80005d4:	20fa      	movs	r0, #250	; 0xfa
 80005d6:	f000 fa7f 	bl	8000ad8 <timer_scaler>
 80005da:	f000 fa95 	bl	8000b08 <setTimer3>
        state = RED_YELLOW;
 80005de:	2102      	movs	r1, #2
 80005e0:	e6bc      	b.n	800035c <mode_switch_fsm+0x210>
        setTimer5(timer_scaler(250, interrupt_period));
 80005e2:	210a      	movs	r1, #10
        update7SEG(seven_seg_index, seven_seg_buffer.buffer);
 80005e4:	4f59      	ldr	r7, [pc, #356]	; (800074c <mode_switch_fsm+0x600>)
        setTimer5(timer_scaler(250, interrupt_period));
 80005e6:	20fa      	movs	r0, #250	; 0xfa
 80005e8:	f000 fa76 	bl	8000ad8 <timer_scaler>
 80005ec:	f000 faa0 	bl	8000b30 <setTimer5>
        update7SEG(seven_seg_index, seven_seg_buffer.buffer);
 80005f0:	7838      	ldrb	r0, [r7, #0]
 80005f2:	494f      	ldr	r1, [pc, #316]	; (8000730 <mode_switch_fsm+0x5e4>)
 80005f4:	f000 fa30 	bl	8000a58 <update7SEG>
        seven_seg_index += 1;
 80005f8:	783b      	ldrb	r3, [r7, #0]
 80005fa:	3301      	adds	r3, #1
 80005fc:	b2db      	uxtb	r3, r3
        if(seven_seg_index >= 4) {
 80005fe:	2b03      	cmp	r3, #3
            seven_seg_index = 0;
 8000600:	bf88      	it	hi
 8000602:	2300      	movhi	r3, #0
 8000604:	703b      	strb	r3, [r7, #0]
 8000606:	e71d      	b.n	8000444 <mode_switch_fsm+0x2f8>
        setTimer4(timer_scaler(500, interrupt_period));
 8000608:	210a      	movs	r1, #10
 800060a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800060e:	f000 fa63 	bl	8000ad8 <timer_scaler>
 8000612:	f000 fa83 	bl	8000b1c <setTimer4>
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_1);
 8000616:	2103      	movs	r1, #3
 8000618:	484a      	ldr	r0, [pc, #296]	; (8000744 <mode_switch_fsm+0x5f8>)
 800061a:	f000 fd21 	bl	8001060 <HAL_GPIO_TogglePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_SET);
 800061e:	2201      	movs	r2, #1
 8000620:	213c      	movs	r1, #60	; 0x3c
 8000622:	4848      	ldr	r0, [pc, #288]	; (8000744 <mode_switch_fsm+0x5f8>)
 8000624:	f000 fd18 	bl	8001058 <HAL_GPIO_WritePin>
 8000628:	e707      	b.n	800043a <mode_switch_fsm+0x2ee>
        setTimer5(timer_scaler(250, interrupt_period));
 800062a:	210a      	movs	r1, #10
        update7SEG(seven_seg_index, seven_seg_buffer.buffer);
 800062c:	4f47      	ldr	r7, [pc, #284]	; (800074c <mode_switch_fsm+0x600>)
        setTimer5(timer_scaler(250, interrupt_period));
 800062e:	20fa      	movs	r0, #250	; 0xfa
 8000630:	f000 fa52 	bl	8000ad8 <timer_scaler>
 8000634:	f000 fa7c 	bl	8000b30 <setTimer5>
        update7SEG(seven_seg_index, seven_seg_buffer.buffer);
 8000638:	7838      	ldrb	r0, [r7, #0]
 800063a:	493d      	ldr	r1, [pc, #244]	; (8000730 <mode_switch_fsm+0x5e4>)
 800063c:	f000 fa0c 	bl	8000a58 <update7SEG>
        seven_seg_index += 1;
 8000640:	783b      	ldrb	r3, [r7, #0]
 8000642:	3301      	adds	r3, #1
 8000644:	b2db      	uxtb	r3, r3
        if(seven_seg_index >= 4) {
 8000646:	2b03      	cmp	r3, #3
            seven_seg_index = 0;
 8000648:	bf88      	it	hi
 800064a:	2300      	movhi	r3, #0
 800064c:	703b      	strb	r3, [r7, #0]
 800064e:	e5ac      	b.n	80001aa <mode_switch_fsm+0x5e>
        setTimer4(timer_scaler(500, interrupt_period));
 8000650:	210a      	movs	r1, #10
 8000652:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000656:	f000 fa3f 	bl	8000ad8 <timer_scaler>
 800065a:	f000 fa5f 	bl	8000b1c <setTimer4>
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2 | GPIO_PIN_3);
 800065e:	210c      	movs	r1, #12
 8000660:	4838      	ldr	r0, [pc, #224]	; (8000744 <mode_switch_fsm+0x5f8>)
 8000662:	f000 fcfd 	bl	8001060 <HAL_GPIO_TogglePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_SET);
 8000666:	2201      	movs	r2, #1
 8000668:	2133      	movs	r1, #51	; 0x33
 800066a:	4836      	ldr	r0, [pc, #216]	; (8000744 <mode_switch_fsm+0x5f8>)
 800066c:	f000 fcf4 	bl	8001058 <HAL_GPIO_WritePin>
 8000670:	e596      	b.n	80001a0 <mode_switch_fsm+0x54>
        setTimer4(timer_scaler(500, interrupt_period));
 8000672:	210a      	movs	r1, #10
 8000674:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000678:	f000 fa2e 	bl	8000ad8 <timer_scaler>
 800067c:	f000 fa4e 	bl	8000b1c <setTimer4>
        setTimer5(timer_scaler(250, interrupt_period));
 8000680:	210a      	movs	r1, #10
 8000682:	20fa      	movs	r0, #250	; 0xfa
 8000684:	f000 fa28 	bl	8000ad8 <timer_scaler>
 8000688:	f000 fa52 	bl	8000b30 <setTimer5>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	210c      	movs	r1, #12
 8000690:	482c      	ldr	r0, [pc, #176]	; (8000744 <mode_switch_fsm+0x5f8>)
 8000692:	f000 fce1 	bl	8001058 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_SET);
 8000696:	2201      	movs	r2, #1
 8000698:	2133      	movs	r1, #51	; 0x33
 800069a:	482a      	ldr	r0, [pc, #168]	; (8000744 <mode_switch_fsm+0x5f8>)
 800069c:	f000 fcdc 	bl	8001058 <HAL_GPIO_WritePin>
        state = MAN_GREEN;
 80006a0:	2307      	movs	r3, #7
 80006a2:	7023      	strb	r3, [r4, #0]
 80006a4:	e72b      	b.n	80004fe <mode_switch_fsm+0x3b2>
        setTimer4(timer_scaler(500, interrupt_period));
 80006a6:	210a      	movs	r1, #10
 80006a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006ac:	f000 fa14 	bl	8000ad8 <timer_scaler>
 80006b0:	f000 fa34 	bl	8000b1c <setTimer4>
        setTimer5(timer_scaler(250, interrupt_period));
 80006b4:	210a      	movs	r1, #10
 80006b6:	20fa      	movs	r0, #250	; 0xfa
 80006b8:	f000 fa0e 	bl	8000ad8 <timer_scaler>
 80006bc:	f000 fa38 	bl	8000b30 <setTimer5>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	2130      	movs	r1, #48	; 0x30
 80006c4:	481f      	ldr	r0, [pc, #124]	; (8000744 <mode_switch_fsm+0x5f8>)
 80006c6:	f000 fcc7 	bl	8001058 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_SET);
 80006ca:	2201      	movs	r2, #1
 80006cc:	210f      	movs	r1, #15
 80006ce:	481d      	ldr	r0, [pc, #116]	; (8000744 <mode_switch_fsm+0x5f8>)
 80006d0:	f000 fcc2 	bl	8001058 <HAL_GPIO_WritePin>
        state = MAN_YELLOW;
 80006d4:	2306      	movs	r3, #6
 80006d6:	7023      	strb	r3, [r4, #0]
 80006d8:	e6ba      	b.n	8000450 <mode_switch_fsm+0x304>
        setTimer5(timer_scaler(250, interrupt_period));
 80006da:	210a      	movs	r1, #10
        update7SEG(seven_seg_index, seven_seg_buffer.buffer);
 80006dc:	4f1b      	ldr	r7, [pc, #108]	; (800074c <mode_switch_fsm+0x600>)
        setTimer5(timer_scaler(250, interrupt_period));
 80006de:	20fa      	movs	r0, #250	; 0xfa
 80006e0:	f000 f9fa 	bl	8000ad8 <timer_scaler>
 80006e4:	f000 fa24 	bl	8000b30 <setTimer5>
        update7SEG(seven_seg_index, seven_seg_buffer.buffer);
 80006e8:	7838      	ldrb	r0, [r7, #0]
 80006ea:	4911      	ldr	r1, [pc, #68]	; (8000730 <mode_switch_fsm+0x5e4>)
 80006ec:	f000 f9b4 	bl	8000a58 <update7SEG>
        seven_seg_index += 1;
 80006f0:	783b      	ldrb	r3, [r7, #0]
 80006f2:	3301      	adds	r3, #1
 80006f4:	b2db      	uxtb	r3, r3
        if(seven_seg_index >= 4) {
 80006f6:	2b03      	cmp	r3, #3
            seven_seg_index = 0;
 80006f8:	bf88      	it	hi
 80006fa:	2300      	movhi	r3, #0
 80006fc:	703b      	strb	r3, [r7, #0]
 80006fe:	e6f8      	b.n	80004f2 <mode_switch_fsm+0x3a6>
        setTimer4(timer_scaler(500, interrupt_period));
 8000700:	210a      	movs	r1, #10
 8000702:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000706:	f000 f9e7 	bl	8000ad8 <timer_scaler>
 800070a:	f000 fa07 	bl	8000b1c <setTimer4>
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4 | GPIO_PIN_5);
 800070e:	2130      	movs	r1, #48	; 0x30
 8000710:	480c      	ldr	r0, [pc, #48]	; (8000744 <mode_switch_fsm+0x5f8>)
 8000712:	f000 fca5 	bl	8001060 <HAL_GPIO_TogglePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_SET);
 8000716:	2201      	movs	r2, #1
 8000718:	210f      	movs	r1, #15
 800071a:	480a      	ldr	r0, [pc, #40]	; (8000744 <mode_switch_fsm+0x5f8>)
 800071c:	f000 fc9c 	bl	8001058 <HAL_GPIO_WritePin>
 8000720:	e6e2      	b.n	80004e8 <mode_switch_fsm+0x39c>
 8000722:	bf00      	nop
 8000724:	20000008 	.word	0x20000008
 8000728:	66666667 	.word	0x66666667
 800072c:	20000088 	.word	0x20000088
 8000730:	20000040 	.word	0x20000040
 8000734:	2000000c 	.word	0x2000000c
 8000738:	20000090 	.word	0x20000090
 800073c:	20000010 	.word	0x20000010
 8000740:	20000000 	.word	0x20000000
 8000744:	40010800 	.word	0x40010800
 8000748:	20000014 	.word	0x20000014
 800074c:	20000050 	.word	0x20000050

08000750 <button_reading>:
INTERNAL_LINKAGE GPIO_PinState debounce_button_buffer_2[NO_OF_BUTTONS];

INTERNAL_LINKAGE uint8_t debouce_counter[NO_OF_BUTTONS];
INTERNAL_LINKAGE uint8_t button_flag[NO_OF_BUTTONS];

void button_reading(void) {
 8000750:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000754:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 800081c <button_reading+0xcc>
 8000758:	2400      	movs	r4, #0
 800075a:	4646      	mov	r6, r8
 800075c:	4d2c      	ldr	r5, [pc, #176]	; (8000810 <button_reading+0xc0>)
 800075e:	4f2d      	ldr	r7, [pc, #180]	; (8000814 <button_reading+0xc4>)
 8000760:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 8000820 <button_reading+0xd0>
        debounce_button_buffer_1[i] = debounce_button_buffer_0[i];
        if(i == 0) debounce_button_buffer_0[i] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
        if(i == 1) debounce_button_buffer_0[i] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
        if(i == 2) debounce_button_buffer_0[i] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);
        if(debounce_button_buffer_0[i] == debounce_button_buffer_1[i] && debounce_button_buffer_1[i] == debounce_button_buffer_2[i]) {
            if(button_buffer[i] != debounce_button_buffer_0[i]) {
 8000764:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8000824 <button_reading+0xd4>
        if(i == 2) debounce_button_buffer_0[i] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);
 8000768:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8000828 <button_reading+0xd8>
        debounce_button_buffer_2[i] = debounce_button_buffer_1[i];
 800076c:	7829      	ldrb	r1, [r5, #0]
        debounce_button_buffer_1[i] = debounce_button_buffer_0[i];
 800076e:	f816 3b01 	ldrb.w	r3, [r6], #1
        debounce_button_buffer_2[i] = debounce_button_buffer_1[i];
 8000772:	f807 1b01 	strb.w	r1, [r7], #1
        debounce_button_buffer_1[i] = debounce_button_buffer_0[i];
 8000776:	f805 3b01 	strb.w	r3, [r5], #1
        if(i == 0) debounce_button_buffer_0[i] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 800077a:	b2e3      	uxtb	r3, r4
 800077c:	b17c      	cbz	r4, 800079e <button_reading+0x4e>
        if(i == 1) debounce_button_buffer_0[i] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 800077e:	2b01      	cmp	r3, #1
 8000780:	d024      	beq.n	80007cc <button_reading+0x7c>
        if(i == 2) debounce_button_buffer_0[i] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);
 8000782:	2104      	movs	r1, #4
 8000784:	4650      	mov	r0, sl
 8000786:	f000 fc61 	bl	800104c <HAL_GPIO_ReadPin>
 800078a:	f888 0002 	strb.w	r0, [r8, #2]
        if(debounce_button_buffer_0[i] == debounce_button_buffer_1[i] && debounce_button_buffer_1[i] == debounce_button_buffer_2[i]) {
 800078e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8000792:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8000796:	4299      	cmp	r1, r3
 8000798:	d00d      	beq.n	80007b6 <button_reading+0x66>
                    }
                }
            }
        }
    }
}
 800079a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(i == 0) debounce_button_buffer_0[i] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 800079e:	2101      	movs	r1, #1
 80007a0:	4650      	mov	r0, sl
 80007a2:	f000 fc53 	bl	800104c <HAL_GPIO_ReadPin>
 80007a6:	f888 0000 	strb.w	r0, [r8]
        if(debounce_button_buffer_0[i] == debounce_button_buffer_1[i] && debounce_button_buffer_1[i] == debounce_button_buffer_2[i]) {
 80007aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80007ae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80007b2:	4299      	cmp	r1, r3
 80007b4:	d103      	bne.n	80007be <button_reading+0x6e>
 80007b6:	f817 1c01 	ldrb.w	r1, [r7, #-1]
 80007ba:	4299      	cmp	r1, r3
 80007bc:	d00d      	beq.n	80007da <button_reading+0x8a>
    for(uint8_t i = 0; i < NO_OF_BUTTONS; ++i) {
 80007be:	3401      	adds	r4, #1
 80007c0:	2c03      	cmp	r4, #3
 80007c2:	f10b 0b01 	add.w	fp, fp, #1
 80007c6:	d1d1      	bne.n	800076c <button_reading+0x1c>
}
 80007c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(i == 1) debounce_button_buffer_0[i] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 80007cc:	2102      	movs	r1, #2
 80007ce:	4650      	mov	r0, sl
 80007d0:	f000 fc3c 	bl	800104c <HAL_GPIO_ReadPin>
 80007d4:	f888 0001 	strb.w	r0, [r8, #1]
        if(i == 2) debounce_button_buffer_0[i] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);
 80007d8:	e7e7      	b.n	80007aa <button_reading+0x5a>
            if(button_buffer[i] != debounce_button_buffer_0[i]) {
 80007da:	f814 1009 	ldrb.w	r1, [r4, r9]
 80007de:	4299      	cmp	r1, r3
 80007e0:	d00a      	beq.n	80007f8 <button_reading+0xa8>
                button_buffer[i] = debounce_button_buffer_0[i];
 80007e2:	f804 3009 	strb.w	r3, [r4, r9]
                if(button_buffer[i] == BUTTON_IS_PRESSED) {
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d1e9      	bne.n	80007be <button_reading+0x6e>
                        debouce_counter[i] = 100;
 80007ea:	2164      	movs	r1, #100	; 0x64
                        button_flag[i] = 1;
 80007ec:	2301      	movs	r3, #1
 80007ee:	4a0a      	ldr	r2, [pc, #40]	; (8000818 <button_reading+0xc8>)
                        debouce_counter[i] = 100;
 80007f0:	f88b 1000 	strb.w	r1, [fp]
                        button_flag[i] = 1;
 80007f4:	54a3      	strb	r3, [r4, r2]
 80007f6:	e7e2      	b.n	80007be <button_reading+0x6e>
                debouce_counter[i] -= 1;
 80007f8:	f89b 1000 	ldrb.w	r1, [fp]
 80007fc:	3901      	subs	r1, #1
 80007fe:	b2c9      	uxtb	r1, r1
 8000800:	f88b 1000 	strb.w	r1, [fp]
                if(debouce_counter[i] == 0) {
 8000804:	2900      	cmp	r1, #0
 8000806:	d1da      	bne.n	80007be <button_reading+0x6e>
                    if(button_buffer[i] == BUTTON_IS_PRESSED) {
 8000808:	2b00      	cmp	r3, #0
 800080a:	d1d8      	bne.n	80007be <button_reading+0x6e>
 800080c:	e7ed      	b.n	80007ea <button_reading+0x9a>
 800080e:	bf00      	nop
 8000810:	20000064 	.word	0x20000064
 8000814:	20000068 	.word	0x20000068
 8000818:	20000058 	.word	0x20000058
 800081c:	20000060 	.word	0x20000060
 8000820:	2000005c 	.word	0x2000005c
 8000824:	20000054 	.word	0x20000054
 8000828:	40010c00 	.word	0x40010c00

0800082c <is_button_pressed>:

uint8_t is_button_pressed(uint8_t index) {
    if(index >= NO_OF_BUTTONS) return 0;
 800082c:	2802      	cmp	r0, #2
uint8_t is_button_pressed(uint8_t index) {
 800082e:	4603      	mov	r3, r0
    if(index >= NO_OF_BUTTONS) return 0;
 8000830:	d806      	bhi.n	8000840 <is_button_pressed+0x14>
    if(button_flag[index]) {
 8000832:	4a04      	ldr	r2, [pc, #16]	; (8000844 <is_button_pressed+0x18>)
 8000834:	5c10      	ldrb	r0, [r2, r0]
 8000836:	b120      	cbz	r0, 8000842 <is_button_pressed+0x16>
        button_flag[index] = 0;
 8000838:	2100      	movs	r1, #0
        return 1;
 800083a:	2001      	movs	r0, #1
        button_flag[index] = 0;
 800083c:	54d1      	strb	r1, [r2, r3]
        return 1;
 800083e:	4770      	bx	lr
    if(index >= NO_OF_BUTTONS) return 0;
 8000840:	2000      	movs	r0, #0
    }
    else return 0;
 8000842:	4770      	bx	lr
 8000844:	20000058 	.word	0x20000058

08000848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b510      	push	{r4, lr}
 800084a:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084c:	2224      	movs	r2, #36	; 0x24
 800084e:	2100      	movs	r1, #0
 8000850:	a807      	add	r0, sp, #28
 8000852:	f001 f921 	bl	8001a98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000856:	2402      	movs	r4, #2
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000858:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800085a:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800085c:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085e:	a806      	add	r0, sp, #24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000860:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8000864:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000868:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800086c:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000870:	f000 fc00 	bl	8001074 <HAL_RCC_OscConfig>
 8000874:	b108      	cbz	r0, 800087a <SystemClock_Config+0x32>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000876:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000878:	e7fe      	b.n	8000878 <SystemClock_Config+0x30>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087a:	4601      	mov	r1, r0
 800087c:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800087e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000880:	e9cd 1102 	strd	r1, r1, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000884:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000888:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800088a:	f000 fe29 	bl	80014e0 <HAL_RCC_ClockConfig>
 800088e:	b108      	cbz	r0, 8000894 <SystemClock_Config+0x4c>
 8000890:	b672      	cpsid	i
  while (1)
 8000892:	e7fe      	b.n	8000892 <SystemClock_Config+0x4a>
}
 8000894:	b010      	add	sp, #64	; 0x40
 8000896:	bd10      	pop	{r4, pc}

08000898 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	2400      	movs	r4, #0
{
 800089a:	b500      	push	{lr}
 800089c:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 800089e:	f000 fa41 	bl	8000d24 <HAL_Init>
  SystemClock_Config();
 80008a2:	f7ff ffd1 	bl	8000848 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80008aa:	e9cd 4406 	strd	r4, r4, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	4b36      	ldr	r3, [pc, #216]	; (8000988 <main+0xf0>)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80008b0:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	6999      	ldr	r1, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	f041 0104 	orr.w	r1, r1, #4
 80008ba:	6199      	str	r1, [r3, #24]
 80008bc:	6998      	ldr	r0, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80008be:	213f      	movs	r1, #63	; 0x3f
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c0:	f000 0004 	and.w	r0, r0, #4
 80008c4:	9000      	str	r0, [sp, #0]
 80008c6:	9800      	ldr	r0, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c8:	699d      	ldr	r5, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80008ca:	4830      	ldr	r0, [pc, #192]	; (800098c <main+0xf4>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008cc:	f045 0508 	orr.w	r5, r5, #8
 80008d0:	619d      	str	r5, [r3, #24]
 80008d2:	699b      	ldr	r3, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2502      	movs	r5, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	f003 0308 	and.w	r3, r3, #8
 80008da:	9301      	str	r3, [sp, #4]
 80008dc:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80008de:	f000 fbbb 	bl	8001058 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80008e2:	4622      	mov	r2, r4
 80008e4:	f64f 6178 	movw	r1, #65144	; 0xfe78
 80008e8:	4829      	ldr	r0, [pc, #164]	; (8000990 <main+0xf8>)
 80008ea:	f000 fbb5 	bl	8001058 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80008ee:	233f      	movs	r3, #63	; 0x3f
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f0:	4826      	ldr	r0, [pc, #152]	; (800098c <main+0xf4>)
 80008f2:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f000 faa6 	bl	8000e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000900:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000902:	4823      	ldr	r0, [pc, #140]	; (8000990 <main+0xf8>)
 8000904:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000906:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090c:	f000 fa9e 	bl	8000e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000910:	f64f 6378 	movw	r3, #65144	; 0xfe78
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000914:	481e      	ldr	r0, [pc, #120]	; (8000990 <main+0xf8>)
 8000916:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800091a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	e9cd 6405 	strd	r6, r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000920:	f000 fa94 	bl	8000e4c <HAL_GPIO_Init>
  htim2.Instance = TIM2;
 8000924:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 7999;
 8000928:	f641 723f 	movw	r2, #7999	; 0x1f3f
  htim2.Init.Period = 9;
 800092c:	2309      	movs	r3, #9
  htim2.Instance = TIM2;
 800092e:	4d19      	ldr	r5, [pc, #100]	; (8000994 <main+0xfc>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000930:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000934:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000936:	e9cd 4406 	strd	r4, r4, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093a:	e9cd 4402 	strd	r4, r4, [sp, #8]
  htim2.Init.Prescaler = 7999;
 800093e:	e9c5 1200 	strd	r1, r2, [r5]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000942:	60ac      	str	r4, [r5, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000944:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000946:	61ac      	str	r4, [r5, #24]
  htim2.Init.Period = 9;
 8000948:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800094a:	f001 f821 	bl	8001990 <HAL_TIM_Base_Init>
 800094e:	b108      	cbz	r0, 8000954 <main+0xbc>
 8000950:	b672      	cpsid	i
  while (1)
 8000952:	e7fe      	b.n	8000952 <main+0xba>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000958:	4628      	mov	r0, r5
 800095a:	a904      	add	r1, sp, #16
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800095c:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800095e:	f000 fe87 	bl	8001670 <HAL_TIM_ConfigClockSource>
 8000962:	4603      	mov	r3, r0
 8000964:	b108      	cbz	r0, 800096a <main+0xd2>
 8000966:	b672      	cpsid	i
  while (1)
 8000968:	e7fe      	b.n	8000968 <main+0xd0>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800096a:	4628      	mov	r0, r5
 800096c:	a902      	add	r1, sp, #8
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096e:	e9cd 3302 	strd	r3, r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000972:	f001 f83b 	bl	80019ec <HAL_TIMEx_MasterConfigSynchronization>
 8000976:	b108      	cbz	r0, 800097c <main+0xe4>
 8000978:	b672      	cpsid	i
  while (1)
 800097a:	e7fe      	b.n	800097a <main+0xe2>
  HAL_TIM_Base_Start_IT(&htim2);
 800097c:	4628      	mov	r0, r5
 800097e:	f000 fe4f 	bl	8001620 <HAL_TIM_Base_Start_IT>
      mode_switch_fsm();
 8000982:	f7ff fbe3 	bl	800014c <mode_switch_fsm>
  while (1)
 8000986:	e7fc      	b.n	8000982 <main+0xea>
 8000988:	40021000 	.word	0x40021000
 800098c:	40010800 	.word	0x40010800
 8000990:	40010c00 	.word	0x40010c00
 8000994:	20000094 	.word	0x20000094

08000998 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000998:	b508      	push	{r3, lr}
  button_reading();
 800099a:	f7ff fed9 	bl	8000750 <button_reading>
}
 800099e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  timerRun();
 80009a2:	f000 b8cf 	b.w	8000b44 <timerRun>
 80009a6:	bf00      	nop

080009a8 <display7SEG>:
 */

#include "seven_seg.h"

void display7SEG(uint8_t num) {
    if(num > 9) num = 9;
 80009a8:	2809      	cmp	r0, #9
void display7SEG(uint8_t num) {
 80009aa:	b510      	push	{r4, lr}
    if(num > 9) num = 9;
 80009ac:	d90e      	bls.n	80009cc <display7SEG+0x24>
        led_off_pins = GPIO_PIN_13;
        break;
    default:
        led_on_pins = GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
    }
    HAL_GPIO_WritePin(GPIOB, led_on_pins, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	f44f 415e 	mov.w	r1, #56832	; 0xde00
 80009b4:	4827      	ldr	r0, [pc, #156]	; (8000a54 <display7SEG+0xac>)
 80009b6:	f000 fb4f 	bl	8001058 <HAL_GPIO_WritePin>
        led_off_pins = GPIO_PIN_13;
 80009ba:	f44f 5400 	mov.w	r4, #8192	; 0x2000
    if(num != 8) HAL_GPIO_WritePin(GPIOB, led_off_pins, GPIO_PIN_SET);
 80009be:	4621      	mov	r1, r4
}
 80009c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if(num != 8) HAL_GPIO_WritePin(GPIOB, led_off_pins, GPIO_PIN_SET);
 80009c4:	2201      	movs	r2, #1
 80009c6:	4823      	ldr	r0, [pc, #140]	; (8000a54 <display7SEG+0xac>)
 80009c8:	f000 bb46 	b.w	8001058 <HAL_GPIO_WritePin>
    switch(num) {
 80009cc:	3801      	subs	r0, #1
 80009ce:	2808      	cmp	r0, #8
 80009d0:	d83a      	bhi.n	8000a48 <display7SEG+0xa0>
 80009d2:	e8df f000 	tbb	[pc, r0]
 80009d6:	0513      	.short	0x0513
 80009d8:	27221d18 	.word	0x27221d18
 80009dc:	312c      	.short	0x312c
 80009de:	0e          	.byte	0x0e
 80009df:	00          	.byte	0x00
        led_off_pins = GPIO_PIN_11 | GPIO_PIN_14;
 80009e0:	f44f 4490 	mov.w	r4, #18432	; 0x4800
        led_on_pins = GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_15;
 80009e4:	f44f 4136 	mov.w	r1, #46592	; 0xb600
    HAL_GPIO_WritePin(GPIOB, led_on_pins, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	481a      	ldr	r0, [pc, #104]	; (8000a54 <display7SEG+0xac>)
 80009ec:	f000 fb34 	bl	8001058 <HAL_GPIO_WritePin>
    if(num != 8) HAL_GPIO_WritePin(GPIOB, led_off_pins, GPIO_PIN_SET);
 80009f0:	e7e5      	b.n	80009be <display7SEG+0x16>
        led_off_pins = GPIO_PIN_13;
 80009f2:	f44f 5400 	mov.w	r4, #8192	; 0x2000
        led_on_pins = GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_14 | GPIO_PIN_15;
 80009f6:	f44f 415e 	mov.w	r1, #56832	; 0xde00
 80009fa:	e7f5      	b.n	80009e8 <display7SEG+0x40>
        led_off_pins = GPIO_PIN_9 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80009fc:	f44f 4472 	mov.w	r4, #61952	; 0xf200
        led_on_pins = GPIO_PIN_10 | GPIO_PIN_11;
 8000a00:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000a04:	e7f0      	b.n	80009e8 <display7SEG+0x40>
        led_off_pins = GPIO_PIN_13 | GPIO_PIN_14;
 8000a06:	f44f 44c0 	mov.w	r4, #24576	; 0x6000
        led_on_pins = GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_15;
 8000a0a:	f44f 411e 	mov.w	r1, #40448	; 0x9e00
        break;
 8000a0e:	e7eb      	b.n	80009e8 <display7SEG+0x40>
        led_off_pins = GPIO_PIN_9 | GPIO_PIN_12 | GPIO_PIN_13;
 8000a10:	f44f 5448 	mov.w	r4, #12800	; 0x3200
        led_on_pins = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_14 | GPIO_PIN_15;
 8000a14:	f44f 414c 	mov.w	r1, #52224	; 0xcc00
        break;
 8000a18:	e7e6      	b.n	80009e8 <display7SEG+0x40>
        led_off_pins = GPIO_PIN_10 | GPIO_PIN_13;
 8000a1a:	f44f 5410 	mov.w	r4, #9216	; 0x2400
        led_on_pins = GPIO_PIN_9 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_14 | GPIO_PIN_15;
 8000a1e:	f44f 415a 	mov.w	r1, #55808	; 0xda00
        break;
 8000a22:	e7e1      	b.n	80009e8 <display7SEG+0x40>
        led_off_pins = GPIO_PIN_10;
 8000a24:	f44f 6480 	mov.w	r4, #1024	; 0x400
        led_on_pins = GPIO_PIN_9 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8000a28:	f44f 417a 	mov.w	r1, #64000	; 0xfa00
        break;
 8000a2c:	e7dc      	b.n	80009e8 <display7SEG+0x40>
        led_off_pins = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8000a2e:	f44f 4470 	mov.w	r4, #61440	; 0xf000
        led_on_pins = GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
 8000a32:	f44f 6160 	mov.w	r1, #3584	; 0xe00
        break;
 8000a36:	e7d7      	b.n	80009e8 <display7SEG+0x40>
    HAL_GPIO_WritePin(GPIOB, led_on_pins, GPIO_PIN_RESET);
 8000a38:	2200      	movs	r2, #0
}
 8000a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_WritePin(GPIOB, led_on_pins, GPIO_PIN_RESET);
 8000a3e:	f44f 417e 	mov.w	r1, #65024	; 0xfe00
 8000a42:	4804      	ldr	r0, [pc, #16]	; (8000a54 <display7SEG+0xac>)
 8000a44:	f000 bb08 	b.w	8001058 <HAL_GPIO_WritePin>
    if(num > 9) num = 9;
 8000a48:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 8000a4c:	f44f 41fc 	mov.w	r1, #32256	; 0x7e00
 8000a50:	e7ca      	b.n	80009e8 <display7SEG+0x40>
 8000a52:	bf00      	nop
 8000a54:	40010c00 	.word	0x40010c00

08000a58 <update7SEG>:

void update7SEG(uint8_t index, int32_t *led_buffer) {
 8000a58:	b510      	push	{r4, lr}
 8000a5a:	4604      	mov	r4, r0
    display7SEG(led_buffer[index]);
 8000a5c:	f811 0020 	ldrb.w	r0, [r1, r0, lsl #2]
 8000a60:	f7ff ffa2 	bl	80009a8 <display7SEG>
    switch(index) {
 8000a64:	2c03      	cmp	r4, #3
 8000a66:	d833      	bhi.n	8000ad0 <update7SEG+0x78>
 8000a68:	e8df f004 	tbb	[pc, r4]
 8000a6c:	02261a0e 	.word	0x02261a0e
    case 2:
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6, GPIO_PIN_SET);
        break;
    case 3:
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2140      	movs	r1, #64	; 0x40
 8000a74:	4817      	ldr	r0, [pc, #92]	; (8000ad4 <update7SEG+0x7c>)
 8000a76:	f000 faef 	bl	8001058 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_SET);
        break;
    default:
        break;
    }
 8000a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_SET);
 8000a7e:	2201      	movs	r2, #1
 8000a80:	2138      	movs	r1, #56	; 0x38
 8000a82:	4814      	ldr	r0, [pc, #80]	; (8000ad4 <update7SEG+0x7c>)
 8000a84:	f000 bae8 	b.w	8001058 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2108      	movs	r1, #8
 8000a8c:	4811      	ldr	r0, [pc, #68]	; (8000ad4 <update7SEG+0x7c>)
 8000a8e:	f000 fae3 	bl	8001058 <HAL_GPIO_WritePin>
 8000a92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6, GPIO_PIN_SET);
 8000a96:	2201      	movs	r2, #1
 8000a98:	2170      	movs	r1, #112	; 0x70
 8000a9a:	480e      	ldr	r0, [pc, #56]	; (8000ad4 <update7SEG+0x7c>)
 8000a9c:	f000 badc 	b.w	8001058 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2110      	movs	r1, #16
 8000aa4:	480b      	ldr	r0, [pc, #44]	; (8000ad4 <update7SEG+0x7c>)
 8000aa6:	f000 fad7 	bl	8001058 <HAL_GPIO_WritePin>
 8000aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_6, GPIO_PIN_SET);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	2168      	movs	r1, #104	; 0x68
 8000ab2:	4808      	ldr	r0, [pc, #32]	; (8000ad4 <update7SEG+0x7c>)
 8000ab4:	f000 bad0 	b.w	8001058 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2120      	movs	r1, #32
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <update7SEG+0x7c>)
 8000abe:	f000 facb 	bl	8001058 <HAL_GPIO_WritePin>
 8000ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6, GPIO_PIN_SET);
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	2158      	movs	r1, #88	; 0x58
 8000aca:	4802      	ldr	r0, [pc, #8]	; (8000ad4 <update7SEG+0x7c>)
 8000acc:	f000 bac4 	b.w	8001058 <HAL_GPIO_WritePin>
 8000ad0:	bd10      	pop	{r4, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40010c00 	.word	0x40010c00

08000ad8 <timer_scaler>:
int timer5_counter = 0;
int timer5_flag = 0;

int timer_scaler(int milli_second, int interrupt_period) {	//	ms, ms
	return milli_second / interrupt_period;
}
 8000ad8:	fb90 f0f1 	sdiv	r0, r0, r1
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <setTimer1>:

void setTimer1(int duration) {
	timer1_counter = duration;
	timer1_flag = 0;
 8000ae0:	2200      	movs	r2, #0
	timer1_counter = duration;
 8000ae2:	4902      	ldr	r1, [pc, #8]	; (8000aec <setTimer1+0xc>)
	timer1_flag = 0;
 8000ae4:	4b02      	ldr	r3, [pc, #8]	; (8000af0 <setTimer1+0x10>)
	timer1_counter = duration;
 8000ae6:	6008      	str	r0, [r1, #0]
	timer1_flag = 0;
 8000ae8:	601a      	str	r2, [r3, #0]
}
 8000aea:	4770      	bx	lr
 8000aec:	2000006c 	.word	0x2000006c
 8000af0:	20000070 	.word	0x20000070

08000af4 <setTimer2>:
void setTimer2(int duration) {
	timer2_counter = duration;
	timer2_flag = 0;
 8000af4:	2200      	movs	r2, #0
	timer2_counter = duration;
 8000af6:	4902      	ldr	r1, [pc, #8]	; (8000b00 <setTimer2+0xc>)
	timer2_flag = 0;
 8000af8:	4b02      	ldr	r3, [pc, #8]	; (8000b04 <setTimer2+0x10>)
	timer2_counter = duration;
 8000afa:	6008      	str	r0, [r1, #0]
	timer2_flag = 0;
 8000afc:	601a      	str	r2, [r3, #0]
}
 8000afe:	4770      	bx	lr
 8000b00:	20000074 	.word	0x20000074
 8000b04:	20000078 	.word	0x20000078

08000b08 <setTimer3>:
void setTimer3(int duration) {
	timer3_counter = duration;
	timer3_flag = 0;
 8000b08:	2200      	movs	r2, #0
	timer3_counter = duration;
 8000b0a:	4902      	ldr	r1, [pc, #8]	; (8000b14 <setTimer3+0xc>)
	timer3_flag = 0;
 8000b0c:	4b02      	ldr	r3, [pc, #8]	; (8000b18 <setTimer3+0x10>)
	timer3_counter = duration;
 8000b0e:	6008      	str	r0, [r1, #0]
	timer3_flag = 0;
 8000b10:	601a      	str	r2, [r3, #0]
}
 8000b12:	4770      	bx	lr
 8000b14:	2000007c 	.word	0x2000007c
 8000b18:	20000080 	.word	0x20000080

08000b1c <setTimer4>:
void setTimer4(int duration) {
	timer4_counter = duration;
	timer4_flag = 0;
 8000b1c:	2200      	movs	r2, #0
	timer4_counter = duration;
 8000b1e:	4902      	ldr	r1, [pc, #8]	; (8000b28 <setTimer4+0xc>)
	timer4_flag = 0;
 8000b20:	4b02      	ldr	r3, [pc, #8]	; (8000b2c <setTimer4+0x10>)
	timer4_counter = duration;
 8000b22:	6008      	str	r0, [r1, #0]
	timer4_flag = 0;
 8000b24:	601a      	str	r2, [r3, #0]
}
 8000b26:	4770      	bx	lr
 8000b28:	20000084 	.word	0x20000084
 8000b2c:	20000088 	.word	0x20000088

08000b30 <setTimer5>:
void setTimer5(int duration) {
	timer5_counter = duration;
	timer5_flag = 0;
 8000b30:	2200      	movs	r2, #0
	timer5_counter = duration;
 8000b32:	4902      	ldr	r1, [pc, #8]	; (8000b3c <setTimer5+0xc>)
	timer5_flag = 0;
 8000b34:	4b02      	ldr	r3, [pc, #8]	; (8000b40 <setTimer5+0x10>)
	timer5_counter = duration;
 8000b36:	6008      	str	r0, [r1, #0]
	timer5_flag = 0;
 8000b38:	601a      	str	r2, [r3, #0]
}
 8000b3a:	4770      	bx	lr
 8000b3c:	2000008c 	.word	0x2000008c
 8000b40:	20000090 	.word	0x20000090

08000b44 <timerRun>:
void timerRun(){
	if(timer1_counter > 0) {
 8000b44:	4a1b      	ldr	r2, [pc, #108]	; (8000bb4 <timerRun+0x70>)
 8000b46:	6813      	ldr	r3, [r2, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	dd03      	ble.n	8000b54 <timerRun+0x10>
		timer1_counter--;
 8000b4c:	3b01      	subs	r3, #1
 8000b4e:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0) {
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d02b      	beq.n	8000bac <timerRun+0x68>
			timer1_flag = 1;
		}
	}
	if(timer2_counter > 0) {
 8000b54:	4a18      	ldr	r2, [pc, #96]	; (8000bb8 <timerRun+0x74>)
 8000b56:	6813      	ldr	r3, [r2, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	dd02      	ble.n	8000b62 <timerRun+0x1e>
		timer2_counter--;
 8000b5c:	3b01      	subs	r3, #1
 8000b5e:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0) {
 8000b60:	b303      	cbz	r3, 8000ba4 <timerRun+0x60>
			timer2_flag = 1;
		}
	}
	if(timer3_counter > 0) {
 8000b62:	4a16      	ldr	r2, [pc, #88]	; (8000bbc <timerRun+0x78>)
 8000b64:	6813      	ldr	r3, [r2, #0]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	dd02      	ble.n	8000b70 <timerRun+0x2c>
		timer3_counter--;
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0) {
 8000b6e:	b1ab      	cbz	r3, 8000b9c <timerRun+0x58>
			timer3_flag = 1;
		}
	}
	if(timer4_counter > 0) {
 8000b70:	4a13      	ldr	r2, [pc, #76]	; (8000bc0 <timerRun+0x7c>)
 8000b72:	6813      	ldr	r3, [r2, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	dd02      	ble.n	8000b7e <timerRun+0x3a>
		timer4_counter--;
 8000b78:	3b01      	subs	r3, #1
 8000b7a:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0) {
 8000b7c:	b153      	cbz	r3, 8000b94 <timerRun+0x50>
			timer4_flag = 1;
		}
	}
	if(timer5_counter > 0) {
 8000b7e:	4a11      	ldr	r2, [pc, #68]	; (8000bc4 <timerRun+0x80>)
 8000b80:	6813      	ldr	r3, [r2, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	dd05      	ble.n	8000b92 <timerRun+0x4e>
		timer5_counter--;
 8000b86:	3b01      	subs	r3, #1
 8000b88:	6013      	str	r3, [r2, #0]
		if(timer5_counter <= 0) {
 8000b8a:	b913      	cbnz	r3, 8000b92 <timerRun+0x4e>
			timer5_flag = 1;
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <timerRun+0x84>)
 8000b90:	601a      	str	r2, [r3, #0]
		}
	}
 8000b92:	4770      	bx	lr
			timer4_flag = 1;
 8000b94:	2201      	movs	r2, #1
 8000b96:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <timerRun+0x88>)
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	e7f0      	b.n	8000b7e <timerRun+0x3a>
			timer3_flag = 1;
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <timerRun+0x8c>)
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	e7e5      	b.n	8000b70 <timerRun+0x2c>
			timer2_flag = 1;
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <timerRun+0x90>)
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	e7da      	b.n	8000b62 <timerRun+0x1e>
			timer1_flag = 1;
 8000bac:	2201      	movs	r2, #1
 8000bae:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <timerRun+0x94>)
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	e7cf      	b.n	8000b54 <timerRun+0x10>
 8000bb4:	2000006c 	.word	0x2000006c
 8000bb8:	20000074 	.word	0x20000074
 8000bbc:	2000007c 	.word	0x2000007c
 8000bc0:	20000084 	.word	0x20000084
 8000bc4:	2000008c 	.word	0x2000008c
 8000bc8:	20000090 	.word	0x20000090
 8000bcc:	20000088 	.word	0x20000088
 8000bd0:	20000080 	.word	0x20000080
 8000bd4:	20000078 	.word	0x20000078
 8000bd8:	20000070 	.word	0x20000070

08000bdc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bdc:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <HAL_MspInit+0x3c>)
{
 8000bde:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000be0:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000be2:	490e      	ldr	r1, [pc, #56]	; (8000c1c <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000be4:	f042 0201 	orr.w	r2, r2, #1
 8000be8:	619a      	str	r2, [r3, #24]
 8000bea:	699a      	ldr	r2, [r3, #24]
 8000bec:	f002 0201 	and.w	r2, r2, #1
 8000bf0:	9200      	str	r2, [sp, #0]
 8000bf2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf4:	69da      	ldr	r2, [r3, #28]
 8000bf6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000bfa:	61da      	str	r2, [r3, #28]
 8000bfc:	69db      	ldr	r3, [r3, #28]
 8000bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c02:	9301      	str	r3, [sp, #4]
 8000c04:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000c06:	684b      	ldr	r3, [r1, #4]
 8000c08:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c10:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c12:	b002      	add	sp, #8
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	40010000 	.word	0x40010000

08000c20 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8000c20:	6803      	ldr	r3, [r0, #0]
 8000c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c26:	d000      	beq.n	8000c2a <HAL_TIM_Base_MspInit+0xa>
 8000c28:	4770      	bx	lr

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c2a:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c2c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
{
 8000c30:	b510      	push	{r4, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c32:	69dc      	ldr	r4, [r3, #28]
{
 8000c34:	b082      	sub	sp, #8
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c36:	f044 0401 	orr.w	r4, r4, #1
 8000c3a:	61dc      	str	r4, [r3, #28]
 8000c3c:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c3e:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c40:	f003 0301 	and.w	r3, r3, #1
 8000c44:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c46:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c48:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c4a:	f000 f8a1 	bl	8000d90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c4e:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c50:	b002      	add	sp, #8
 8000c52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c56:	f000 b8d3 	b.w	8000e00 <HAL_NVIC_EnableIRQ>
 8000c5a:	bf00      	nop

08000c5c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <NMI_Handler>
 8000c5e:	bf00      	nop

08000c60 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <HardFault_Handler>
 8000c62:	bf00      	nop

08000c64 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <MemManage_Handler>
 8000c66:	bf00      	nop

08000c68 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <BusFault_Handler>
 8000c6a:	bf00      	nop

08000c6c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <UsageFault_Handler>
 8000c6e:	bf00      	nop

08000c70 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop

08000c74 <DebugMon_Handler>:
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <PendSV_Handler>:
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop

08000c7c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c7c:	f000 b864 	b.w	8000d48 <HAL_IncTick>

08000c80 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c80:	4801      	ldr	r0, [pc, #4]	; (8000c88 <TIM2_IRQHandler+0x8>)
 8000c82:	f000 bda1 	b.w	80017c8 <HAL_TIM_IRQHandler>
 8000c86:	bf00      	nop
 8000c88:	20000094 	.word	0x20000094

08000c8c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c90:	480c      	ldr	r0, [pc, #48]	; (8000cc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c92:	490d      	ldr	r1, [pc, #52]	; (8000cc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c94:	4a0d      	ldr	r2, [pc, #52]	; (8000ccc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c98:	e002      	b.n	8000ca0 <LoopCopyDataInit>

08000c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9e:	3304      	adds	r3, #4

08000ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca4:	d3f9      	bcc.n	8000c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ca8:	4c0a      	ldr	r4, [pc, #40]	; (8000cd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cac:	e001      	b.n	8000cb2 <LoopFillZerobss>

08000cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb0:	3204      	adds	r2, #4

08000cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb4:	d3fb      	bcc.n	8000cae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cb6:	f7ff ffe9 	bl	8000c8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cba:	f000 fec9 	bl	8001a50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cbe:	f7ff fdeb 	bl	8000898 <main>
  bx lr
 8000cc2:	4770      	bx	lr
  ldr r0, =_sdata
 8000cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc8:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000ccc:	08001aec 	.word	0x08001aec
  ldr r2, =_sbss
 8000cd0:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000cd4:	200000e0 	.word	0x200000e0

08000cd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cd8:	e7fe      	b.n	8000cd8 <ADC1_2_IRQHandler>
	...

08000cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cdc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce2:	4a0d      	ldr	r2, [pc, #52]	; (8000d18 <HAL_InitTick+0x3c>)
{
 8000ce4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce6:	7811      	ldrb	r1, [r2, #0]
 8000ce8:	4a0c      	ldr	r2, [pc, #48]	; (8000d1c <HAL_InitTick+0x40>)
 8000cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cee:	6812      	ldr	r2, [r2, #0]
 8000cf0:	fbb2 f0f3 	udiv	r0, r2, r3
 8000cf4:	f000 f892 	bl	8000e1c <HAL_SYSTICK_Config>
 8000cf8:	b908      	cbnz	r0, 8000cfe <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfa:	2d0f      	cmp	r5, #15
 8000cfc:	d901      	bls.n	8000d02 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000cfe:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000d00:	bd38      	pop	{r3, r4, r5, pc}
 8000d02:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d04:	4602      	mov	r2, r0
 8000d06:	4629      	mov	r1, r5
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0c:	f000 f840 	bl	8000d90 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d10:	4b03      	ldr	r3, [pc, #12]	; (8000d20 <HAL_InitTick+0x44>)
 8000d12:	4620      	mov	r0, r4
 8000d14:	601d      	str	r5, [r3, #0]
}
 8000d16:	bd38      	pop	{r3, r4, r5, pc}
 8000d18:	2000001c 	.word	0x2000001c
 8000d1c:	20000018 	.word	0x20000018
 8000d20:	20000020 	.word	0x20000020

08000d24 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d24:	4a07      	ldr	r2, [pc, #28]	; (8000d44 <HAL_Init+0x20>)
{
 8000d26:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d28:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d2a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d2c:	f043 0310 	orr.w	r3, r3, #16
 8000d30:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d32:	f000 f81b 	bl	8000d6c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d36:	200f      	movs	r0, #15
 8000d38:	f7ff ffd0 	bl	8000cdc <HAL_InitTick>
  HAL_MspInit();
 8000d3c:	f7ff ff4e 	bl	8000bdc <HAL_MspInit>
}
 8000d40:	2000      	movs	r0, #0
 8000d42:	bd08      	pop	{r3, pc}
 8000d44:	40022000 	.word	0x40022000

08000d48 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000d48:	4a03      	ldr	r2, [pc, #12]	; (8000d58 <HAL_IncTick+0x10>)
 8000d4a:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <HAL_IncTick+0x14>)
 8000d4c:	6811      	ldr	r1, [r2, #0]
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	440b      	add	r3, r1
 8000d52:	6013      	str	r3, [r2, #0]
}
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	200000dc 	.word	0x200000dc
 8000d5c:	2000001c 	.word	0x2000001c

08000d60 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d60:	4b01      	ldr	r3, [pc, #4]	; (8000d68 <HAL_GetTick+0x8>)
 8000d62:	6818      	ldr	r0, [r3, #0]
}
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	200000dc 	.word	0x200000dc

08000d6c <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6c:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d70:	4a06      	ldr	r2, [pc, #24]	; (8000d8c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d72:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d74:	68d0      	ldr	r0, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7a:	4008      	ands	r0, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d7c:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000d7e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000d86:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d90:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d92:	b430      	push	{r4, r5}
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d9a:	f1c3 0507 	rsb	r5, r3, #7
 8000d9e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da0:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da4:	bf28      	it	cs
 8000da6:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da8:	2c06      	cmp	r4, #6
 8000daa:	d919      	bls.n	8000de0 <HAL_NVIC_SetPriority+0x50>
 8000dac:	f04f 34ff 	mov.w	r4, #4294967295
 8000db0:	3b03      	subs	r3, #3
 8000db2:	409c      	lsls	r4, r3
 8000db4:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db8:	f04f 34ff 	mov.w	r4, #4294967295
 8000dbc:	40ac      	lsls	r4, r5
 8000dbe:	ea21 0104 	bic.w	r1, r1, r4
 8000dc2:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000dc4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc6:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000dca:	db0c      	blt.n	8000de6 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dcc:	0109      	lsls	r1, r1, #4
 8000dce:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000dd2:	b2c9      	uxtb	r1, r1
 8000dd4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000dd8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000ddc:	bc30      	pop	{r4, r5}
 8000dde:	4770      	bx	lr
 8000de0:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de2:	4613      	mov	r3, r2
 8000de4:	e7e8      	b.n	8000db8 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de6:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <HAL_NVIC_SetPriority+0x6c>)
 8000de8:	f000 000f 	and.w	r0, r0, #15
 8000dec:	0109      	lsls	r1, r1, #4
 8000dee:	b2c9      	uxtb	r1, r1
 8000df0:	4403      	add	r3, r0
 8000df2:	7619      	strb	r1, [r3, #24]
 8000df4:	bc30      	pop	{r4, r5}
 8000df6:	4770      	bx	lr
 8000df8:	e000ed00 	.word	0xe000ed00
 8000dfc:	e000ecfc 	.word	0xe000ecfc

08000e00 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000e00:	2800      	cmp	r0, #0
 8000e02:	db07      	blt.n	8000e14 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e04:	2301      	movs	r3, #1
 8000e06:	f000 011f 	and.w	r1, r0, #31
 8000e0a:	4a03      	ldr	r2, [pc, #12]	; (8000e18 <HAL_NVIC_EnableIRQ+0x18>)
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	0940      	lsrs	r0, r0, #5
 8000e10:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000e100 	.word	0xe000e100

08000e1c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e1c:	3801      	subs	r0, #1
 8000e1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e22:	d20d      	bcs.n	8000e40 <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e24:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e26:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e28:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e2a:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e2c:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2e:	4c06      	ldr	r4, [pc, #24]	; (8000e48 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e30:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e32:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e36:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 8000e38:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e3a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e3c:	6019      	str	r1, [r3, #0]
 8000e3e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e40:	2001      	movs	r0, #1
 8000e42:	4770      	bx	lr
 8000e44:	e000e010 	.word	0xe000e010
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e50:	680c      	ldr	r4, [r1, #0]
{
 8000e52:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e54:	2c00      	cmp	r4, #0
 8000e56:	f000 809c 	beq.w	8000f92 <HAL_GPIO_Init+0x146>
  uint32_t config = 0x00u;
 8000e5a:	2600      	movs	r6, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e5c:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 800103c <HAL_GPIO_Init+0x1f0>
  uint32_t position = 0x00u;
 8000e60:	4633      	mov	r3, r6
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e62:	4f71      	ldr	r7, [pc, #452]	; (8001028 <HAL_GPIO_Init+0x1dc>)
      switch (GPIO_Init->Mode)
 8000e64:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8001040 <HAL_GPIO_Init+0x1f4>
 8000e68:	f8df e1d8 	ldr.w	lr, [pc, #472]	; 8001044 <HAL_GPIO_Init+0x1f8>
 8000e6c:	9000      	str	r0, [sp, #0]
 8000e6e:	e004      	b.n	8000e7a <HAL_GPIO_Init+0x2e>
        }
      }
    }

	position++;
 8000e70:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e72:	fa34 f203 	lsrs.w	r2, r4, r3
 8000e76:	f000 808c 	beq.w	8000f92 <HAL_GPIO_Init+0x146>
    ioposition = (0x01uL << position);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	409a      	lsls	r2, r3
    if (iocurrent == ioposition)
 8000e7e:	ea32 0004 	bics.w	r0, r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e82:	ea02 0504 	and.w	r5, r2, r4
    if (iocurrent == ioposition)
 8000e86:	d1f3      	bne.n	8000e70 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 8000e88:	684c      	ldr	r4, [r1, #4]
 8000e8a:	2c12      	cmp	r4, #18
 8000e8c:	f200 8084 	bhi.w	8000f98 <HAL_GPIO_Init+0x14c>
 8000e90:	2c12      	cmp	r4, #18
 8000e92:	d80c      	bhi.n	8000eae <HAL_GPIO_Init+0x62>
 8000e94:	e8df f004 	tbb	[pc, r4]
 8000e98:	0ab9bc88 	.word	0x0ab9bc88
 8000e9c:	0b0b0b0b 	.word	0x0b0b0b0b
 8000ea0:	0b0b0b0b 	.word	0x0b0b0b0b
 8000ea4:	0b0b0b0b 	.word	0x0b0b0b0b
 8000ea8:	b60b      	.short	0xb60b
 8000eaa:	b3          	.byte	0xb3
 8000eab:	00          	.byte	0x00
 8000eac:	2600      	movs	r6, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000eae:	2dff      	cmp	r5, #255	; 0xff
 8000eb0:	f200 8081 	bhi.w	8000fb6 <HAL_GPIO_Init+0x16a>
 8000eb4:	f8dd 9000 	ldr.w	r9, [sp]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000eb8:	ea4f 0a83 	mov.w	sl, r3, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ebc:	240f      	movs	r4, #15
 8000ebe:	f8d9 2000 	ldr.w	r2, [r9]
 8000ec2:	fa04 fb0a 	lsl.w	fp, r4, sl
 8000ec6:	ea22 020b 	bic.w	r2, r2, fp
 8000eca:	fa06 fa0a 	lsl.w	sl, r6, sl
 8000ece:	ea42 020a 	orr.w	r2, r2, sl
 8000ed2:	f8c9 2000 	str.w	r2, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ed6:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8000eda:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 8000ede:	f000 808c 	beq.w	8000ffa <HAL_GPIO_Init+0x1ae>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ee2:	f8dc a018 	ldr.w	sl, [ip, #24]
 8000ee6:	f023 0203 	bic.w	r2, r3, #3
 8000eea:	f04a 0a01 	orr.w	sl, sl, #1
 8000eee:	f8cc a018 	str.w	sl, [ip, #24]
 8000ef2:	f8dc a018 	ldr.w	sl, [ip, #24]
 8000ef6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8000efa:	f00a 0a01 	and.w	sl, sl, #1
 8000efe:	f8cd a00c 	str.w	sl, [sp, #12]
 8000f02:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f06:	f003 0a03 	and.w	sl, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f0a:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f0e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000f12:	f8d2 b008 	ldr.w	fp, [r2, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f16:	fa04 f40a 	lsl.w	r4, r4, sl
 8000f1a:	ea2b 0004 	bic.w	r0, fp, r4
 8000f1e:	9001      	str	r0, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f20:	9c00      	ldr	r4, [sp, #0]
 8000f22:	4842      	ldr	r0, [pc, #264]	; (800102c <HAL_GPIO_Init+0x1e0>)
 8000f24:	4284      	cmp	r4, r0
 8000f26:	d011      	beq.n	8000f4c <HAL_GPIO_Init+0x100>
 8000f28:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8000f2c:	4284      	cmp	r4, r0
 8000f2e:	d071      	beq.n	8001014 <HAL_GPIO_Init+0x1c8>
 8000f30:	483f      	ldr	r0, [pc, #252]	; (8001030 <HAL_GPIO_Init+0x1e4>)
 8000f32:	9c00      	ldr	r4, [sp, #0]
 8000f34:	4284      	cmp	r4, r0
 8000f36:	bf0c      	ite	eq
 8000f38:	f04f 0b02 	moveq.w	fp, #2
 8000f3c:	f04f 0b03 	movne.w	fp, #3
 8000f40:	9801      	ldr	r0, [sp, #4]
 8000f42:	fa0b fa0a 	lsl.w	sl, fp, sl
 8000f46:	ea40 000a 	orr.w	r0, r0, sl
 8000f4a:	9001      	str	r0, [sp, #4]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f4c:	9801      	ldr	r0, [sp, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f4e:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        AFIO->EXTICR[position >> 2u] = temp;
 8000f52:	6090      	str	r0, [r2, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000f54:	683a      	ldr	r2, [r7, #0]
 8000f56:	bf14      	ite	ne
 8000f58:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f5a:	43aa      	biceq	r2, r5
 8000f5c:	603a      	str	r2, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000f5e:	687a      	ldr	r2, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f60:	f419 3f00 	tst.w	r9, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000f64:	bf14      	ite	ne
 8000f66:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f68:	43aa      	biceq	r2, r5
 8000f6a:	607a      	str	r2, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f6c:	68ba      	ldr	r2, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f6e:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f72:	bf14      	ite	ne
 8000f74:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f76:	43aa      	biceq	r2, r5
 8000f78:	60ba      	str	r2, [r7, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f7a:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f7e:	68fa      	ldr	r2, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f80:	d038      	beq.n	8000ff4 <HAL_GPIO_Init+0x1a8>
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f82:	4315      	orrs	r5, r2
 8000f84:	60fd      	str	r5, [r7, #12]
 8000f86:	680c      	ldr	r4, [r1, #0]
	position++;
 8000f88:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f8a:	fa34 f203 	lsrs.w	r2, r4, r3
 8000f8e:	f47f af74 	bne.w	8000e7a <HAL_GPIO_Init+0x2e>
  }
}
 8000f92:	b005      	add	sp, #20
 8000f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000f98:	4544      	cmp	r4, r8
 8000f9a:	d005      	beq.n	8000fa8 <HAL_GPIO_Init+0x15c>
 8000f9c:	d913      	bls.n	8000fc6 <HAL_GPIO_Init+0x17a>
 8000f9e:	4574      	cmp	r4, lr
 8000fa0:	d002      	beq.n	8000fa8 <HAL_GPIO_Init+0x15c>
 8000fa2:	4824      	ldr	r0, [pc, #144]	; (8001034 <HAL_GPIO_Init+0x1e8>)
 8000fa4:	4284      	cmp	r4, r0
 8000fa6:	d182      	bne.n	8000eae <HAL_GPIO_Init+0x62>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fa8:	688c      	ldr	r4, [r1, #8]
 8000faa:	b9dc      	cbnz	r4, 8000fe4 <HAL_GPIO_Init+0x198>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fac:	2dff      	cmp	r5, #255	; 0xff
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fae:	f04f 0604 	mov.w	r6, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fb2:	f67f af7f 	bls.w	8000eb4 <HAL_GPIO_Init+0x68>
 8000fb6:	9a00      	ldr	r2, [sp, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fb8:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8000fbc:	f1aa 0a20 	sub.w	sl, sl, #32
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fc0:	f102 0904 	add.w	r9, r2, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fc4:	e77a      	b.n	8000ebc <HAL_GPIO_Init+0x70>
      switch (GPIO_Init->Mode)
 8000fc6:	481c      	ldr	r0, [pc, #112]	; (8001038 <HAL_GPIO_Init+0x1ec>)
 8000fc8:	4284      	cmp	r4, r0
 8000fca:	d0ed      	beq.n	8000fa8 <HAL_GPIO_Init+0x15c>
 8000fcc:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8001048 <HAL_GPIO_Init+0x1fc>
 8000fd0:	454c      	cmp	r4, r9
 8000fd2:	d0e9      	beq.n	8000fa8 <HAL_GPIO_Init+0x15c>
 8000fd4:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8000fd8:	454c      	cmp	r4, r9
 8000fda:	f47f af68 	bne.w	8000eae <HAL_GPIO_Init+0x62>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fde:	688c      	ldr	r4, [r1, #8]
 8000fe0:	2c00      	cmp	r4, #0
 8000fe2:	d0e3      	beq.n	8000fac <HAL_GPIO_Init+0x160>
            GPIOx->BSRR = ioposition;
 8000fe4:	9800      	ldr	r0, [sp, #0]
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fe6:	2c01      	cmp	r4, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fe8:	f04f 0608 	mov.w	r6, #8
            GPIOx->BSRR = ioposition;
 8000fec:	bf0c      	ite	eq
 8000fee:	6102      	streq	r2, [r0, #16]
            GPIOx->BRR = ioposition;
 8000ff0:	6142      	strne	r2, [r0, #20]
 8000ff2:	e75c      	b.n	8000eae <HAL_GPIO_Init+0x62>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ff4:	ea22 0505 	bic.w	r5, r2, r5
 8000ff8:	60fd      	str	r5, [r7, #12]
 8000ffa:	680c      	ldr	r4, [r1, #0]
 8000ffc:	e738      	b.n	8000e70 <HAL_GPIO_Init+0x24>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ffe:	68ce      	ldr	r6, [r1, #12]
 8001000:	360c      	adds	r6, #12
          break;
 8001002:	e754      	b.n	8000eae <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001004:	68ce      	ldr	r6, [r1, #12]
 8001006:	3604      	adds	r6, #4
          break;
 8001008:	e751      	b.n	8000eae <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800100a:	68ce      	ldr	r6, [r1, #12]
 800100c:	3608      	adds	r6, #8
          break;
 800100e:	e74e      	b.n	8000eae <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001010:	68ce      	ldr	r6, [r1, #12]
          break;
 8001012:	e74c      	b.n	8000eae <HAL_GPIO_Init+0x62>
 8001014:	f04f 0b01 	mov.w	fp, #1
 8001018:	9801      	ldr	r0, [sp, #4]
 800101a:	fa0b fa0a 	lsl.w	sl, fp, sl
 800101e:	ea40 000a 	orr.w	r0, r0, sl
 8001022:	9001      	str	r0, [sp, #4]
 8001024:	e792      	b.n	8000f4c <HAL_GPIO_Init+0x100>
 8001026:	bf00      	nop
 8001028:	40010400 	.word	0x40010400
 800102c:	40010800 	.word	0x40010800
 8001030:	40011000 	.word	0x40011000
 8001034:	10320000 	.word	0x10320000
 8001038:	10120000 	.word	0x10120000
 800103c:	40021000 	.word	0x40021000
 8001040:	10220000 	.word	0x10220000
 8001044:	10310000 	.word	0x10310000
 8001048:	10210000 	.word	0x10210000

0800104c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800104c:	6883      	ldr	r3, [r0, #8]
 800104e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001050:	bf14      	ite	ne
 8001052:	2001      	movne	r0, #1
 8001054:	2000      	moveq	r0, #0
 8001056:	4770      	bx	lr

08001058 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001058:	b902      	cbnz	r2, 800105c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800105a:	0409      	lsls	r1, r1, #16
 800105c:	6101      	str	r1, [r0, #16]
  }
}
 800105e:	4770      	bx	lr

08001060 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001060:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001062:	ea01 0203 	and.w	r2, r1, r3
 8001066:	ea21 0103 	bic.w	r1, r1, r3
 800106a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800106e:	6101      	str	r1, [r0, #16]
}
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop

08001074 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001074:	2800      	cmp	r0, #0
 8001076:	f000 81c3 	beq.w	8001400 <HAL_RCC_OscConfig+0x38c>
{
 800107a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800107e:	6803      	ldr	r3, [r0, #0]
 8001080:	4604      	mov	r4, r0
 8001082:	07dd      	lsls	r5, r3, #31
{
 8001084:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001086:	d535      	bpl.n	80010f4 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001088:	49a6      	ldr	r1, [pc, #664]	; (8001324 <HAL_RCC_OscConfig+0x2b0>)
 800108a:	684a      	ldr	r2, [r1, #4]
 800108c:	f002 020c 	and.w	r2, r2, #12
 8001090:	2a04      	cmp	r2, #4
 8001092:	f000 80ef 	beq.w	8001274 <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001096:	684a      	ldr	r2, [r1, #4]
 8001098:	f002 020c 	and.w	r2, r2, #12
 800109c:	2a08      	cmp	r2, #8
 800109e:	f000 80e5 	beq.w	800126c <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010a2:	6863      	ldr	r3, [r4, #4]
 80010a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010a8:	d010      	beq.n	80010cc <HAL_RCC_OscConfig+0x58>
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f000 810d 	beq.w	80012ca <HAL_RCC_OscConfig+0x256>
 80010b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010b4:	f000 818f 	beq.w	80013d6 <HAL_RCC_OscConfig+0x362>
 80010b8:	4b9a      	ldr	r3, [pc, #616]	; (8001324 <HAL_RCC_OscConfig+0x2b0>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	e004      	b.n	80010d6 <HAL_RCC_OscConfig+0x62>
 80010cc:	4a95      	ldr	r2, [pc, #596]	; (8001324 <HAL_RCC_OscConfig+0x2b0>)
 80010ce:	6813      	ldr	r3, [r2, #0]
 80010d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d6:	f7ff fe43 	bl	8000d60 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010da:	4e92      	ldr	r6, [pc, #584]	; (8001324 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 80010dc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010de:	e005      	b.n	80010ec <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010e0:	f7ff fe3e 	bl	8000d60 <HAL_GetTick>
 80010e4:	1b40      	subs	r0, r0, r5
 80010e6:	2864      	cmp	r0, #100	; 0x64
 80010e8:	f200 80eb 	bhi.w	80012c2 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ec:	6833      	ldr	r3, [r6, #0]
 80010ee:	039a      	lsls	r2, r3, #14
 80010f0:	d5f6      	bpl.n	80010e0 <HAL_RCC_OscConfig+0x6c>
 80010f2:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010f4:	079f      	lsls	r7, r3, #30
 80010f6:	d528      	bpl.n	800114a <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010f8:	4a8a      	ldr	r2, [pc, #552]	; (8001324 <HAL_RCC_OscConfig+0x2b0>)
 80010fa:	6851      	ldr	r1, [r2, #4]
 80010fc:	f011 0f0c 	tst.w	r1, #12
 8001100:	f000 808e 	beq.w	8001220 <HAL_RCC_OscConfig+0x1ac>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001104:	6851      	ldr	r1, [r2, #4]
 8001106:	f001 010c 	and.w	r1, r1, #12
 800110a:	2908      	cmp	r1, #8
 800110c:	f000 8084 	beq.w	8001218 <HAL_RCC_OscConfig+0x1a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001110:	6923      	ldr	r3, [r4, #16]
 8001112:	2b00      	cmp	r3, #0
 8001114:	f000 8125 	beq.w	8001362 <HAL_RCC_OscConfig+0x2ee>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001118:	2201      	movs	r2, #1
 800111a:	4b83      	ldr	r3, [pc, #524]	; (8001328 <HAL_RCC_OscConfig+0x2b4>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800111c:	4e81      	ldr	r6, [pc, #516]	; (8001324 <HAL_RCC_OscConfig+0x2b0>)
        __HAL_RCC_HSI_ENABLE();
 800111e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001120:	f7ff fe1e 	bl	8000d60 <HAL_GetTick>
 8001124:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001126:	e005      	b.n	8001134 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001128:	f7ff fe1a 	bl	8000d60 <HAL_GetTick>
 800112c:	1b40      	subs	r0, r0, r5
 800112e:	2802      	cmp	r0, #2
 8001130:	f200 80c7 	bhi.w	80012c2 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001134:	6833      	ldr	r3, [r6, #0]
 8001136:	0798      	lsls	r0, r3, #30
 8001138:	d5f6      	bpl.n	8001128 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800113a:	6833      	ldr	r3, [r6, #0]
 800113c:	6962      	ldr	r2, [r4, #20]
 800113e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001142:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001146:	6033      	str	r3, [r6, #0]
 8001148:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800114a:	071a      	lsls	r2, r3, #28
 800114c:	d41f      	bmi.n	800118e <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800114e:	075d      	lsls	r5, r3, #29
 8001150:	d541      	bpl.n	80011d6 <HAL_RCC_OscConfig+0x162>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001152:	4b74      	ldr	r3, [pc, #464]	; (8001324 <HAL_RCC_OscConfig+0x2b0>)
 8001154:	69da      	ldr	r2, [r3, #28]
 8001156:	00d0      	lsls	r0, r2, #3
 8001158:	d57d      	bpl.n	8001256 <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 800115a:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800115c:	4b73      	ldr	r3, [pc, #460]	; (800132c <HAL_RCC_OscConfig+0x2b8>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	05d1      	lsls	r1, r2, #23
 8001162:	f140 809d 	bpl.w	80012a0 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001166:	68e3      	ldr	r3, [r4, #12]
 8001168:	2b01      	cmp	r3, #1
 800116a:	f000 810b 	beq.w	8001384 <HAL_RCC_OscConfig+0x310>
 800116e:	2b00      	cmp	r3, #0
 8001170:	f000 80c5 	beq.w	80012fe <HAL_RCC_OscConfig+0x28a>
 8001174:	2b05      	cmp	r3, #5
 8001176:	4b6b      	ldr	r3, [pc, #428]	; (8001324 <HAL_RCC_OscConfig+0x2b0>)
 8001178:	6a1a      	ldr	r2, [r3, #32]
 800117a:	f000 8139 	beq.w	80013f0 <HAL_RCC_OscConfig+0x37c>
 800117e:	f022 0201 	bic.w	r2, r2, #1
 8001182:	621a      	str	r2, [r3, #32]
 8001184:	6a1a      	ldr	r2, [r3, #32]
 8001186:	f022 0204 	bic.w	r2, r2, #4
 800118a:	621a      	str	r2, [r3, #32]
 800118c:	e0ff      	b.n	800138e <HAL_RCC_OscConfig+0x31a>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800118e:	69a3      	ldr	r3, [r4, #24]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d050      	beq.n	8001236 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8001194:	2201      	movs	r2, #1
 8001196:	4b66      	ldr	r3, [pc, #408]	; (8001330 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001198:	4e62      	ldr	r6, [pc, #392]	; (8001324 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_ENABLE();
 800119a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800119c:	f7ff fde0 	bl	8000d60 <HAL_GetTick>
 80011a0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011a2:	e005      	b.n	80011b0 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011a4:	f7ff fddc 	bl	8000d60 <HAL_GetTick>
 80011a8:	1b40      	subs	r0, r0, r5
 80011aa:	2802      	cmp	r0, #2
 80011ac:	f200 8089 	bhi.w	80012c2 <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011b0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80011b2:	079b      	lsls	r3, r3, #30
 80011b4:	d5f6      	bpl.n	80011a4 <HAL_RCC_OscConfig+0x130>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80011b6:	4b5f      	ldr	r3, [pc, #380]	; (8001334 <HAL_RCC_OscConfig+0x2c0>)
 80011b8:	4a5f      	ldr	r2, [pc, #380]	; (8001338 <HAL_RCC_OscConfig+0x2c4>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	fba2 2303 	umull	r2, r3, r2, r3
 80011c0:	0a5b      	lsrs	r3, r3, #9
 80011c2:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80011c4:	bf00      	nop
  }
  while (Delay --);
 80011c6:	9b01      	ldr	r3, [sp, #4]
 80011c8:	1e5a      	subs	r2, r3, #1
 80011ca:	9201      	str	r2, [sp, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d1f9      	bne.n	80011c4 <HAL_RCC_OscConfig+0x150>
 80011d0:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011d2:	075d      	lsls	r5, r3, #29
 80011d4:	d4bd      	bmi.n	8001152 <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011d6:	69e0      	ldr	r0, [r4, #28]
 80011d8:	b1d0      	cbz	r0, 8001210 <HAL_RCC_OscConfig+0x19c>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011da:	4d52      	ldr	r5, [pc, #328]	; (8001324 <HAL_RCC_OscConfig+0x2b0>)
 80011dc:	686a      	ldr	r2, [r5, #4]
 80011de:	f002 020c 	and.w	r2, r2, #12
 80011e2:	2a08      	cmp	r2, #8
 80011e4:	f000 80e6 	beq.w	80013b4 <HAL_RCC_OscConfig+0x340>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011e8:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80011ea:	f04f 0100 	mov.w	r1, #0
 80011ee:	4a53      	ldr	r2, [pc, #332]	; (800133c <HAL_RCC_OscConfig+0x2c8>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011f0:	f000 8108 	beq.w	8001404 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_PLL_DISABLE();
 80011f4:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 80011f6:	f7ff fdb3 	bl	8000d60 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011fa:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80011fc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011fe:	e004      	b.n	800120a <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001200:	f7ff fdae 	bl	8000d60 <HAL_GetTick>
 8001204:	1b40      	subs	r0, r0, r5
 8001206:	2802      	cmp	r0, #2
 8001208:	d85b      	bhi.n	80012c2 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800120a:	6823      	ldr	r3, [r4, #0]
 800120c:	019b      	lsls	r3, r3, #6
 800120e:	d4f7      	bmi.n	8001200 <HAL_RCC_OscConfig+0x18c>
  return HAL_OK;
 8001210:	2000      	movs	r0, #0
}
 8001212:	b002      	add	sp, #8
 8001214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001218:	6852      	ldr	r2, [r2, #4]
 800121a:	03d6      	lsls	r6, r2, #15
 800121c:	f53f af78 	bmi.w	8001110 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001220:	4a40      	ldr	r2, [pc, #256]	; (8001324 <HAL_RCC_OscConfig+0x2b0>)
 8001222:	6812      	ldr	r2, [r2, #0]
 8001224:	0795      	lsls	r5, r2, #30
 8001226:	d52f      	bpl.n	8001288 <HAL_RCC_OscConfig+0x214>
 8001228:	6922      	ldr	r2, [r4, #16]
 800122a:	2a01      	cmp	r2, #1
 800122c:	d02c      	beq.n	8001288 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 800122e:	2001      	movs	r0, #1
}
 8001230:	b002      	add	sp, #8
 8001232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8001236:	4a3e      	ldr	r2, [pc, #248]	; (8001330 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001238:	4e3a      	ldr	r6, [pc, #232]	; (8001324 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_DISABLE();
 800123a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800123c:	f7ff fd90 	bl	8000d60 <HAL_GetTick>
 8001240:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001242:	e004      	b.n	800124e <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001244:	f7ff fd8c 	bl	8000d60 <HAL_GetTick>
 8001248:	1b40      	subs	r0, r0, r5
 800124a:	2802      	cmp	r0, #2
 800124c:	d839      	bhi.n	80012c2 <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800124e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001250:	079f      	lsls	r7, r3, #30
 8001252:	d4f7      	bmi.n	8001244 <HAL_RCC_OscConfig+0x1d0>
 8001254:	e7bc      	b.n	80011d0 <HAL_RCC_OscConfig+0x15c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001256:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8001258:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800125a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800125e:	61da      	str	r2, [r3, #28]
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 800126a:	e777      	b.n	800115c <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800126c:	684a      	ldr	r2, [r1, #4]
 800126e:	03d0      	lsls	r0, r2, #15
 8001270:	f57f af17 	bpl.w	80010a2 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001274:	4a2b      	ldr	r2, [pc, #172]	; (8001324 <HAL_RCC_OscConfig+0x2b0>)
 8001276:	6812      	ldr	r2, [r2, #0]
 8001278:	0391      	lsls	r1, r2, #14
 800127a:	f57f af3b 	bpl.w	80010f4 <HAL_RCC_OscConfig+0x80>
 800127e:	6862      	ldr	r2, [r4, #4]
 8001280:	2a00      	cmp	r2, #0
 8001282:	f47f af37 	bne.w	80010f4 <HAL_RCC_OscConfig+0x80>
 8001286:	e7d2      	b.n	800122e <HAL_RCC_OscConfig+0x1ba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001288:	4926      	ldr	r1, [pc, #152]	; (8001324 <HAL_RCC_OscConfig+0x2b0>)
 800128a:	6960      	ldr	r0, [r4, #20]
 800128c:	680a      	ldr	r2, [r1, #0]
 800128e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001292:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001296:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001298:	071a      	lsls	r2, r3, #28
 800129a:	f57f af58 	bpl.w	800114e <HAL_RCC_OscConfig+0xda>
 800129e:	e776      	b.n	800118e <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012a0:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a2:	461f      	mov	r7, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012a8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80012aa:	f7ff fd59 	bl	8000d60 <HAL_GetTick>
 80012ae:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	05da      	lsls	r2, r3, #23
 80012b4:	f53f af57 	bmi.w	8001166 <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012b8:	f7ff fd52 	bl	8000d60 <HAL_GetTick>
 80012bc:	1b80      	subs	r0, r0, r6
 80012be:	2864      	cmp	r0, #100	; 0x64
 80012c0:	d9f6      	bls.n	80012b0 <HAL_RCC_OscConfig+0x23c>
            return HAL_TIMEOUT;
 80012c2:	2003      	movs	r0, #3
}
 80012c4:	b002      	add	sp, #8
 80012c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80012ce:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80012d2:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d4:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80012e2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012e4:	f7ff fd3c 	bl	8000d60 <HAL_GetTick>
 80012e8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ea:	e004      	b.n	80012f6 <HAL_RCC_OscConfig+0x282>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012ec:	f7ff fd38 	bl	8000d60 <HAL_GetTick>
 80012f0:	1b40      	subs	r0, r0, r5
 80012f2:	2864      	cmp	r0, #100	; 0x64
 80012f4:	d8e5      	bhi.n	80012c2 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012f6:	6833      	ldr	r3, [r6, #0]
 80012f8:	039b      	lsls	r3, r3, #14
 80012fa:	d4f7      	bmi.n	80012ec <HAL_RCC_OscConfig+0x278>
 80012fc:	e6f9      	b.n	80010f2 <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001302:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001306:	6a1a      	ldr	r2, [r3, #32]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001308:	461f      	mov	r7, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800130a:	f022 0201 	bic.w	r2, r2, #1
 800130e:	621a      	str	r2, [r3, #32]
 8001310:	6a1a      	ldr	r2, [r3, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001312:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001316:	f022 0204 	bic.w	r2, r2, #4
 800131a:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 800131c:	f7ff fd20 	bl	8000d60 <HAL_GetTick>
 8001320:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001322:	e012      	b.n	800134a <HAL_RCC_OscConfig+0x2d6>
 8001324:	40021000 	.word	0x40021000
 8001328:	42420000 	.word	0x42420000
 800132c:	40007000 	.word	0x40007000
 8001330:	42420480 	.word	0x42420480
 8001334:	20000018 	.word	0x20000018
 8001338:	10624dd3 	.word	0x10624dd3
 800133c:	42420060 	.word	0x42420060
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001340:	f7ff fd0e 	bl	8000d60 <HAL_GetTick>
 8001344:	1b80      	subs	r0, r0, r6
 8001346:	4540      	cmp	r0, r8
 8001348:	d8bb      	bhi.n	80012c2 <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800134a:	6a3b      	ldr	r3, [r7, #32]
 800134c:	0798      	lsls	r0, r3, #30
 800134e:	d4f7      	bmi.n	8001340 <HAL_RCC_OscConfig+0x2cc>
    if (pwrclkchanged == SET)
 8001350:	2d00      	cmp	r5, #0
 8001352:	f43f af40 	beq.w	80011d6 <HAL_RCC_OscConfig+0x162>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001356:	4a44      	ldr	r2, [pc, #272]	; (8001468 <HAL_RCC_OscConfig+0x3f4>)
 8001358:	69d3      	ldr	r3, [r2, #28]
 800135a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800135e:	61d3      	str	r3, [r2, #28]
 8001360:	e739      	b.n	80011d6 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8001362:	4a42      	ldr	r2, [pc, #264]	; (800146c <HAL_RCC_OscConfig+0x3f8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001364:	4e40      	ldr	r6, [pc, #256]	; (8001468 <HAL_RCC_OscConfig+0x3f4>)
        __HAL_RCC_HSI_DISABLE();
 8001366:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001368:	f7ff fcfa 	bl	8000d60 <HAL_GetTick>
 800136c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800136e:	e004      	b.n	800137a <HAL_RCC_OscConfig+0x306>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001370:	f7ff fcf6 	bl	8000d60 <HAL_GetTick>
 8001374:	1b40      	subs	r0, r0, r5
 8001376:	2802      	cmp	r0, #2
 8001378:	d8a3      	bhi.n	80012c2 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800137a:	6833      	ldr	r3, [r6, #0]
 800137c:	0799      	lsls	r1, r3, #30
 800137e:	d4f7      	bmi.n	8001370 <HAL_RCC_OscConfig+0x2fc>
 8001380:	6823      	ldr	r3, [r4, #0]
 8001382:	e6e2      	b.n	800114a <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001384:	4a38      	ldr	r2, [pc, #224]	; (8001468 <HAL_RCC_OscConfig+0x3f4>)
 8001386:	6a13      	ldr	r3, [r2, #32]
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 800138e:	f7ff fce7 	bl	8000d60 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001392:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001396:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001398:	4f33      	ldr	r7, [pc, #204]	; (8001468 <HAL_RCC_OscConfig+0x3f4>)
 800139a:	e004      	b.n	80013a6 <HAL_RCC_OscConfig+0x332>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800139c:	f7ff fce0 	bl	8000d60 <HAL_GetTick>
 80013a0:	1b80      	subs	r0, r0, r6
 80013a2:	4540      	cmp	r0, r8
 80013a4:	d88d      	bhi.n	80012c2 <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a6:	6a3b      	ldr	r3, [r7, #32]
 80013a8:	079b      	lsls	r3, r3, #30
 80013aa:	d5f7      	bpl.n	800139c <HAL_RCC_OscConfig+0x328>
    if (pwrclkchanged == SET)
 80013ac:	2d00      	cmp	r5, #0
 80013ae:	f43f af12 	beq.w	80011d6 <HAL_RCC_OscConfig+0x162>
 80013b2:	e7d0      	b.n	8001356 <HAL_RCC_OscConfig+0x2e2>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013b4:	2801      	cmp	r0, #1
 80013b6:	f43f af2c 	beq.w	8001212 <HAL_RCC_OscConfig+0x19e>
        pll_config = RCC->CFGR;
 80013ba:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013bc:	6a22      	ldr	r2, [r4, #32]
 80013be:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80013c2:	4291      	cmp	r1, r2
 80013c4:	f47f af33 	bne.w	800122e <HAL_RCC_OscConfig+0x1ba>
 80013c8:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013ca:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 80013ce:	1a18      	subs	r0, r3, r0
 80013d0:	bf18      	it	ne
 80013d2:	2001      	movne	r0, #1
 80013d4:	e71d      	b.n	8001212 <HAL_RCC_OscConfig+0x19e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80013da:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	e672      	b.n	80010d6 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013f0:	f042 0204 	orr.w	r2, r2, #4
 80013f4:	621a      	str	r2, [r3, #32]
 80013f6:	6a1a      	ldr	r2, [r3, #32]
 80013f8:	f042 0201 	orr.w	r2, r2, #1
 80013fc:	621a      	str	r2, [r3, #32]
 80013fe:	e7c6      	b.n	800138e <HAL_RCC_OscConfig+0x31a>
    return HAL_ERROR;
 8001400:	2001      	movs	r0, #1
}
 8001402:	4770      	bx	lr
        __HAL_RCC_PLL_DISABLE();
 8001404:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8001406:	f7ff fcab 	bl	8000d60 <HAL_GetTick>
 800140a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800140c:	e005      	b.n	800141a <HAL_RCC_OscConfig+0x3a6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800140e:	f7ff fca7 	bl	8000d60 <HAL_GetTick>
 8001412:	1b80      	subs	r0, r0, r6
 8001414:	2802      	cmp	r0, #2
 8001416:	f63f af54 	bhi.w	80012c2 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800141a:	682b      	ldr	r3, [r5, #0]
 800141c:	0199      	lsls	r1, r3, #6
 800141e:	d4f6      	bmi.n	800140e <HAL_RCC_OscConfig+0x39a>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001420:	6a23      	ldr	r3, [r4, #32]
 8001422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001426:	d105      	bne.n	8001434 <HAL_RCC_OscConfig+0x3c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001428:	686a      	ldr	r2, [r5, #4]
 800142a:	68a1      	ldr	r1, [r4, #8]
 800142c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001430:	430a      	orrs	r2, r1
 8001432:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001434:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001436:	4d0c      	ldr	r5, [pc, #48]	; (8001468 <HAL_RCC_OscConfig+0x3f4>)
 8001438:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800143a:	686a      	ldr	r2, [r5, #4]
 800143c:	430b      	orrs	r3, r1
 800143e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8001442:	490b      	ldr	r1, [pc, #44]	; (8001470 <HAL_RCC_OscConfig+0x3fc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001444:	4313      	orrs	r3, r2
 8001446:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001448:	6008      	str	r0, [r1, #0]
        tickstart = HAL_GetTick();
 800144a:	f7ff fc89 	bl	8000d60 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800144e:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8001450:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001452:	e005      	b.n	8001460 <HAL_RCC_OscConfig+0x3ec>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001454:	f7ff fc84 	bl	8000d60 <HAL_GetTick>
 8001458:	1b40      	subs	r0, r0, r5
 800145a:	2802      	cmp	r0, #2
 800145c:	f63f af31 	bhi.w	80012c2 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001460:	6823      	ldr	r3, [r4, #0]
 8001462:	019a      	lsls	r2, r3, #6
 8001464:	d5f6      	bpl.n	8001454 <HAL_RCC_OscConfig+0x3e0>
 8001466:	e6d3      	b.n	8001210 <HAL_RCC_OscConfig+0x19c>
 8001468:	40021000 	.word	0x40021000
 800146c:	42420000 	.word	0x42420000
 8001470:	42420060 	.word	0x42420060

08001474 <HAL_RCC_GetSysClockFreq>:
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001474:	f240 2201 	movw	r2, #513	; 0x201
{
 8001478:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x5c>)
 800147c:	f10d 0c18 	add.w	ip, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001480:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001484:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001486:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 800148a:	4a12      	ldr	r2, [pc, #72]	; (80014d4 <HAL_RCC_GetSysClockFreq+0x60>)
 800148c:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800148e:	f003 010c 	and.w	r1, r3, #12
 8001492:	2908      	cmp	r1, #8
 8001494:	d002      	beq.n	800149c <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8001496:	4810      	ldr	r0, [pc, #64]	; (80014d8 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001498:	b006      	add	sp, #24
 800149a:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800149c:	f3c3 4183 	ubfx	r1, r3, #18, #4
 80014a0:	4461      	add	r1, ip
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014a2:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014a4:	f811 1c10 	ldrb.w	r1, [r1, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014a8:	d50c      	bpl.n	80014c4 <HAL_RCC_GetSysClockFreq+0x50>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014aa:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014ac:	480a      	ldr	r0, [pc, #40]	; (80014d8 <HAL_RCC_GetSysClockFreq+0x64>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014ae:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014b2:	fb00 f001 	mul.w	r0, r0, r1
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014b6:	4463      	add	r3, ip
 80014b8:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014bc:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80014c0:	b006      	add	sp, #24
 80014c2:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014c4:	4805      	ldr	r0, [pc, #20]	; (80014dc <HAL_RCC_GetSysClockFreq+0x68>)
 80014c6:	fb00 f001 	mul.w	r0, r0, r1
}
 80014ca:	b006      	add	sp, #24
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	08001ad0 	.word	0x08001ad0
 80014d4:	40021000 	.word	0x40021000
 80014d8:	007a1200 	.word	0x007a1200
 80014dc:	003d0900 	.word	0x003d0900

080014e0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80014e0:	2800      	cmp	r0, #0
 80014e2:	f000 808c 	beq.w	80015fe <HAL_RCC_ClockConfig+0x11e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014e6:	4a49      	ldr	r2, [pc, #292]	; (800160c <HAL_RCC_ClockConfig+0x12c>)
{
 80014e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014ec:	6813      	ldr	r3, [r2, #0]
 80014ee:	4604      	mov	r4, r0
 80014f0:	f003 0307 	and.w	r3, r3, #7
 80014f4:	428b      	cmp	r3, r1
 80014f6:	460d      	mov	r5, r1
 80014f8:	d20c      	bcs.n	8001514 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fa:	6813      	ldr	r3, [r2, #0]
 80014fc:	f023 0307 	bic.w	r3, r3, #7
 8001500:	430b      	orrs	r3, r1
 8001502:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001504:	6813      	ldr	r3, [r2, #0]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	428b      	cmp	r3, r1
 800150c:	d002      	beq.n	8001514 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800150e:	2001      	movs	r0, #1
}
 8001510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001514:	6823      	ldr	r3, [r4, #0]
 8001516:	0798      	lsls	r0, r3, #30
 8001518:	d514      	bpl.n	8001544 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800151a:	0759      	lsls	r1, r3, #29
 800151c:	d504      	bpl.n	8001528 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800151e:	493c      	ldr	r1, [pc, #240]	; (8001610 <HAL_RCC_ClockConfig+0x130>)
 8001520:	684a      	ldr	r2, [r1, #4]
 8001522:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001526:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001528:	071a      	lsls	r2, r3, #28
 800152a:	d504      	bpl.n	8001536 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800152c:	4938      	ldr	r1, [pc, #224]	; (8001610 <HAL_RCC_ClockConfig+0x130>)
 800152e:	684a      	ldr	r2, [r1, #4]
 8001530:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8001534:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001536:	4936      	ldr	r1, [pc, #216]	; (8001610 <HAL_RCC_ClockConfig+0x130>)
 8001538:	68a0      	ldr	r0, [r4, #8]
 800153a:	684a      	ldr	r2, [r1, #4]
 800153c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001540:	4302      	orrs	r2, r0
 8001542:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001544:	07df      	lsls	r7, r3, #31
 8001546:	d520      	bpl.n	800158a <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001548:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800154a:	4b31      	ldr	r3, [pc, #196]	; (8001610 <HAL_RCC_ClockConfig+0x130>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800154c:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800154e:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001550:	d057      	beq.n	8001602 <HAL_RCC_ClockConfig+0x122>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001552:	2a02      	cmp	r2, #2
 8001554:	d050      	beq.n	80015f8 <HAL_RCC_ClockConfig+0x118>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001556:	0799      	lsls	r1, r3, #30
 8001558:	d5d9      	bpl.n	800150e <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800155a:	4e2d      	ldr	r6, [pc, #180]	; (8001610 <HAL_RCC_ClockConfig+0x130>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800155c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001560:	6873      	ldr	r3, [r6, #4]
 8001562:	f023 0303 	bic.w	r3, r3, #3
 8001566:	4313      	orrs	r3, r2
 8001568:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800156a:	f7ff fbf9 	bl	8000d60 <HAL_GetTick>
 800156e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001570:	e004      	b.n	800157c <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001572:	f7ff fbf5 	bl	8000d60 <HAL_GetTick>
 8001576:	1bc0      	subs	r0, r0, r7
 8001578:	4540      	cmp	r0, r8
 800157a:	d845      	bhi.n	8001608 <HAL_RCC_ClockConfig+0x128>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800157c:	6873      	ldr	r3, [r6, #4]
 800157e:	6862      	ldr	r2, [r4, #4]
 8001580:	f003 030c 	and.w	r3, r3, #12
 8001584:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001588:	d1f3      	bne.n	8001572 <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800158a:	4a20      	ldr	r2, [pc, #128]	; (800160c <HAL_RCC_ClockConfig+0x12c>)
 800158c:	6813      	ldr	r3, [r2, #0]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	42ab      	cmp	r3, r5
 8001594:	d909      	bls.n	80015aa <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001596:	6813      	ldr	r3, [r2, #0]
 8001598:	f023 0307 	bic.w	r3, r3, #7
 800159c:	432b      	orrs	r3, r5
 800159e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a0:	6813      	ldr	r3, [r2, #0]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	42ab      	cmp	r3, r5
 80015a8:	d1b1      	bne.n	800150e <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015aa:	6823      	ldr	r3, [r4, #0]
 80015ac:	075a      	lsls	r2, r3, #29
 80015ae:	d506      	bpl.n	80015be <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015b0:	4917      	ldr	r1, [pc, #92]	; (8001610 <HAL_RCC_ClockConfig+0x130>)
 80015b2:	68e0      	ldr	r0, [r4, #12]
 80015b4:	684a      	ldr	r2, [r1, #4]
 80015b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80015ba:	4302      	orrs	r2, r0
 80015bc:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015be:	071b      	lsls	r3, r3, #28
 80015c0:	d507      	bpl.n	80015d2 <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015c2:	4a13      	ldr	r2, [pc, #76]	; (8001610 <HAL_RCC_ClockConfig+0x130>)
 80015c4:	6921      	ldr	r1, [r4, #16]
 80015c6:	6853      	ldr	r3, [r2, #4]
 80015c8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80015cc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80015d0:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015d2:	f7ff ff4f 	bl	8001474 <HAL_RCC_GetSysClockFreq>
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <HAL_RCC_ClockConfig+0x130>)
 80015d8:	4a0e      	ldr	r2, [pc, #56]	; (8001614 <HAL_RCC_ClockConfig+0x134>)
 80015da:	685b      	ldr	r3, [r3, #4]
  HAL_InitTick(uwTickPrio);
 80015dc:	490e      	ldr	r1, [pc, #56]	; (8001618 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015de:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80015e2:	5cd3      	ldrb	r3, [r2, r3]
 80015e4:	4a0d      	ldr	r2, [pc, #52]	; (800161c <HAL_RCC_ClockConfig+0x13c>)
 80015e6:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick(uwTickPrio);
 80015ea:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015ec:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 80015ee:	f7ff fb75 	bl	8000cdc <HAL_InitTick>
  return HAL_OK;
 80015f2:	2000      	movs	r0, #0
}
 80015f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f8:	0198      	lsls	r0, r3, #6
 80015fa:	d4ae      	bmi.n	800155a <HAL_RCC_ClockConfig+0x7a>
 80015fc:	e787      	b.n	800150e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80015fe:	2001      	movs	r0, #1
}
 8001600:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001602:	039e      	lsls	r6, r3, #14
 8001604:	d4a9      	bmi.n	800155a <HAL_RCC_ClockConfig+0x7a>
 8001606:	e782      	b.n	800150e <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8001608:	2003      	movs	r0, #3
 800160a:	e781      	b.n	8001510 <HAL_RCC_ClockConfig+0x30>
 800160c:	40022000 	.word	0x40022000
 8001610:	40021000 	.word	0x40021000
 8001614:	08001ac0 	.word	0x08001ac0
 8001618:	20000020 	.word	0x20000020
 800161c:	20000018 	.word	0x20000018

08001620 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001620:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001624:	2b01      	cmp	r3, #1
 8001626:	d116      	bne.n	8001656 <HAL_TIM_Base_Start_IT+0x36>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001628:	2202      	movs	r2, #2

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800162a:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800162c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001630:	68da      	ldr	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001632:	490d      	ldr	r1, [pc, #52]	; (8001668 <HAL_TIM_Base_Start_IT+0x48>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001634:	f042 0201 	orr.w	r2, r2, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001638:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800163a:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800163c:	d00d      	beq.n	800165a <HAL_TIM_Base_Start_IT+0x3a>
 800163e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001642:	d00a      	beq.n	800165a <HAL_TIM_Base_Start_IT+0x3a>
 8001644:	4a09      	ldr	r2, [pc, #36]	; (800166c <HAL_TIM_Base_Start_IT+0x4c>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d007      	beq.n	800165a <HAL_TIM_Base_Start_IT+0x3a>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800164a:	681a      	ldr	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800164c:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800164e:	f042 0201 	orr.w	r2, r2, #1
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	4770      	bx	lr
    return HAL_ERROR;
 8001656:	2001      	movs	r0, #1
 8001658:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001660:	2a06      	cmp	r2, #6
 8001662:	d1f2      	bne.n	800164a <HAL_TIM_Base_Start_IT+0x2a>
  return HAL_OK;
 8001664:	2000      	movs	r0, #0
}
 8001666:	4770      	bx	lr
 8001668:	40012c00 	.word	0x40012c00
 800166c:	40000400 	.word	0x40000400

08001670 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001670:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001674:	2b01      	cmp	r3, #1
 8001676:	d074      	beq.n	8001762 <HAL_TIM_ConfigClockSource+0xf2>
{
 8001678:	b4f0      	push	{r4, r5, r6, r7}

  htim->State = HAL_TIM_STATE_BUSY;
 800167a:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800167c:	2401      	movs	r4, #1

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800167e:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(htim);
 8001680:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001684:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001688:	6894      	ldr	r4, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 800168a:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800168c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8001690:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8001694:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8001696:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8001698:	d065      	beq.n	8001766 <HAL_TIM_ConfigClockSource+0xf6>
 800169a:	d831      	bhi.n	8001700 <HAL_TIM_ConfigClockSource+0x90>
 800169c:	2b40      	cmp	r3, #64	; 0x40
 800169e:	d048      	beq.n	8001732 <HAL_TIM_ConfigClockSource+0xc2>
 80016a0:	d921      	bls.n	80016e6 <HAL_TIM_ConfigClockSource+0x76>
 80016a2:	2b50      	cmp	r3, #80	; 0x50
 80016a4:	d116      	bne.n	80016d4 <HAL_TIM_ConfigClockSource+0x64>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80016a6:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80016a8:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80016aa:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80016ac:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 80016b0:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80016b2:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80016b4:	6993      	ldr	r3, [r2, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80016b6:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80016ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80016be:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 80016c2:	4321      	orrs	r1, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80016c4:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 80016c6:	6211      	str	r1, [r2, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80016c8:	6893      	ldr	r3, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80016ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80016ce:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80016d2:	6093      	str	r3, [r2, #8]
  __HAL_UNLOCK(htim);
 80016d4:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80016d6:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 80016d8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 80016dc:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
}
 80016e0:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80016e2:	4618      	mov	r0, r3
}
 80016e4:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80016e6:	2b20      	cmp	r3, #32
 80016e8:	d002      	beq.n	80016f0 <HAL_TIM_ConfigClockSource+0x80>
 80016ea:	d91e      	bls.n	800172a <HAL_TIM_ConfigClockSource+0xba>
 80016ec:	2b30      	cmp	r3, #48	; 0x30
 80016ee:	d1f1      	bne.n	80016d4 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 80016f0:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80016f2:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80016f6:	430b      	orrs	r3, r1
 80016f8:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80016fc:	6093      	str	r3, [r2, #8]
}
 80016fe:	e7e9      	b.n	80016d4 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8001700:	2b70      	cmp	r3, #112	; 0x70
 8001702:	d049      	beq.n	8001798 <HAL_TIM_ConfigClockSource+0x128>
 8001704:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001708:	d1e4      	bne.n	80016d4 <HAL_TIM_ConfigClockSource+0x64>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800170a:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 800170e:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8001710:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001712:	432b      	orrs	r3, r5
 8001714:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001718:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800171c:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800171e:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001720:	6893      	ldr	r3, [r2, #8]
 8001722:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001726:	6093      	str	r3, [r2, #8]
      break;
 8001728:	e7d4      	b.n	80016d4 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 800172a:	f033 0110 	bics.w	r1, r3, #16
 800172e:	d1d1      	bne.n	80016d4 <HAL_TIM_ConfigClockSource+0x64>
 8001730:	e7de      	b.n	80016f0 <HAL_TIM_ConfigClockSource+0x80>
  tmpccer = TIMx->CCER;
 8001732:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001734:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001736:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001738:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 800173c:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800173e:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001740:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001742:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001746:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800174a:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 800174e:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001750:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8001752:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8001754:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800175a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800175e:	6093      	str	r3, [r2, #8]
}
 8001760:	e7b8      	b.n	80016d4 <HAL_TIM_ConfigClockSource+0x64>
  __HAL_LOCK(htim);
 8001762:	2002      	movs	r0, #2
}
 8001764:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001766:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001768:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800176a:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 800176e:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001770:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001772:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 8001774:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001776:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800177a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800177e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001782:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001786:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8001788:	6213      	str	r3, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 800178a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800178c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001790:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8001794:	6093      	str	r3, [r2, #8]
}
 8001796:	e79d      	b.n	80016d4 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001798:	68cc      	ldr	r4, [r1, #12]
 800179a:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800179e:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80017a0:	432b      	orrs	r3, r5
 80017a2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80017a6:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80017aa:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80017ac:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 80017ae:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80017b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80017b4:	6093      	str	r3, [r2, #8]
      break;
 80017b6:	e78d      	b.n	80016d4 <HAL_TIM_ConfigClockSource+0x64>

080017b8 <HAL_TIM_OC_DelayElapsedCallback>:
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop

080017bc <HAL_TIM_IC_CaptureCallback>:
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop

080017c0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop

080017c4 <HAL_TIM_TriggerCallback>:
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop

080017c8 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017c8:	6803      	ldr	r3, [r0, #0]
{
 80017ca:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017cc:	691a      	ldr	r2, [r3, #16]
{
 80017ce:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017d0:	0791      	lsls	r1, r2, #30
 80017d2:	d502      	bpl.n	80017da <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80017d4:	68da      	ldr	r2, [r3, #12]
 80017d6:	0792      	lsls	r2, r2, #30
 80017d8:	d45f      	bmi.n	800189a <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80017da:	691a      	ldr	r2, [r3, #16]
 80017dc:	0750      	lsls	r0, r2, #29
 80017de:	d502      	bpl.n	80017e6 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80017e0:	68da      	ldr	r2, [r3, #12]
 80017e2:	0751      	lsls	r1, r2, #29
 80017e4:	d446      	bmi.n	8001874 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80017e6:	691a      	ldr	r2, [r3, #16]
 80017e8:	0712      	lsls	r2, r2, #28
 80017ea:	d502      	bpl.n	80017f2 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80017ec:	68da      	ldr	r2, [r3, #12]
 80017ee:	0710      	lsls	r0, r2, #28
 80017f0:	d42e      	bmi.n	8001850 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017f2:	691a      	ldr	r2, [r3, #16]
 80017f4:	06d2      	lsls	r2, r2, #27
 80017f6:	d502      	bpl.n	80017fe <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80017f8:	68da      	ldr	r2, [r3, #12]
 80017fa:	06d0      	lsls	r0, r2, #27
 80017fc:	d418      	bmi.n	8001830 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80017fe:	691a      	ldr	r2, [r3, #16]
 8001800:	07d1      	lsls	r1, r2, #31
 8001802:	d502      	bpl.n	800180a <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001804:	68da      	ldr	r2, [r3, #12]
 8001806:	07d2      	lsls	r2, r2, #31
 8001808:	d45d      	bmi.n	80018c6 <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800180a:	691a      	ldr	r2, [r3, #16]
 800180c:	0610      	lsls	r0, r2, #24
 800180e:	d502      	bpl.n	8001816 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001810:	68da      	ldr	r2, [r3, #12]
 8001812:	0611      	lsls	r1, r2, #24
 8001814:	d45f      	bmi.n	80018d6 <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001816:	691a      	ldr	r2, [r3, #16]
 8001818:	0652      	lsls	r2, r2, #25
 800181a:	d502      	bpl.n	8001822 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	0650      	lsls	r0, r2, #25
 8001820:	d461      	bmi.n	80018e6 <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001822:	691a      	ldr	r2, [r3, #16]
 8001824:	0691      	lsls	r1, r2, #26
 8001826:	d502      	bpl.n	800182e <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001828:	68da      	ldr	r2, [r3, #12]
 800182a:	0692      	lsls	r2, r2, #26
 800182c:	d443      	bmi.n	80018b6 <HAL_TIM_IRQHandler+0xee>
}
 800182e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001830:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001834:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001836:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001838:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800183a:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800183c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800183e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001842:	d064      	beq.n	800190e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001844:	f7ff ffba 	bl	80017bc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001848:	2200      	movs	r2, #0
 800184a:	6823      	ldr	r3, [r4, #0]
 800184c:	7722      	strb	r2, [r4, #28]
 800184e:	e7d6      	b.n	80017fe <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001850:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001854:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001856:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001858:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800185a:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800185c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800185e:	0799      	lsls	r1, r3, #30
 8001860:	d152      	bne.n	8001908 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001862:	f7ff ffa9 	bl	80017b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001866:	4620      	mov	r0, r4
 8001868:	f7ff ffaa 	bl	80017c0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800186c:	2200      	movs	r2, #0
 800186e:	6823      	ldr	r3, [r4, #0]
 8001870:	7722      	strb	r2, [r4, #28]
 8001872:	e7be      	b.n	80017f2 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001874:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001878:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800187a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800187c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800187e:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001880:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001882:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001886:	d13c      	bne.n	8001902 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001888:	f7ff ff96 	bl	80017b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800188c:	4620      	mov	r0, r4
 800188e:	f7ff ff97 	bl	80017c0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001892:	2200      	movs	r2, #0
 8001894:	6823      	ldr	r3, [r4, #0]
 8001896:	7722      	strb	r2, [r4, #28]
 8001898:	e7a5      	b.n	80017e6 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800189a:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800189e:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80018a0:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018a2:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	079b      	lsls	r3, r3, #30
 80018a8:	d025      	beq.n	80018f6 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 80018aa:	f7ff ff87 	bl	80017bc <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018ae:	2200      	movs	r2, #0
 80018b0:	6823      	ldr	r3, [r4, #0]
 80018b2:	7722      	strb	r2, [r4, #28]
 80018b4:	e791      	b.n	80017da <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018b6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80018ba:	4620      	mov	r0, r4
}
 80018bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018c0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80018c2:	f000 b8c1 	b.w	8001a48 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80018c6:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80018ca:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80018cc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80018ce:	f7ff f863 	bl	8000998 <HAL_TIM_PeriodElapsedCallback>
 80018d2:	6823      	ldr	r3, [r4, #0]
 80018d4:	e799      	b.n	800180a <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80018d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80018da:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80018dc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80018de:	f000 f8b5 	bl	8001a4c <HAL_TIMEx_BreakCallback>
 80018e2:	6823      	ldr	r3, [r4, #0]
 80018e4:	e797      	b.n	8001816 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80018ea:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018ec:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80018ee:	f7ff ff69 	bl	80017c4 <HAL_TIM_TriggerCallback>
 80018f2:	6823      	ldr	r3, [r4, #0]
 80018f4:	e795      	b.n	8001822 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018f6:	f7ff ff5f 	bl	80017b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018fa:	4620      	mov	r0, r4
 80018fc:	f7ff ff60 	bl	80017c0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001900:	e7d5      	b.n	80018ae <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8001902:	f7ff ff5b 	bl	80017bc <HAL_TIM_IC_CaptureCallback>
 8001906:	e7c4      	b.n	8001892 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8001908:	f7ff ff58 	bl	80017bc <HAL_TIM_IC_CaptureCallback>
 800190c:	e7ae      	b.n	800186c <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800190e:	f7ff ff53 	bl	80017b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001912:	4620      	mov	r0, r4
 8001914:	f7ff ff54 	bl	80017c0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001918:	e796      	b.n	8001848 <HAL_TIM_IRQHandler+0x80>
 800191a:	bf00      	nop

0800191c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800191c:	4a1b      	ldr	r2, [pc, #108]	; (800198c <TIM_Base_SetConfig+0x70>)
  tmpcr1 = TIMx->CR1;
 800191e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001920:	4290      	cmp	r0, r2
 8001922:	d01d      	beq.n	8001960 <TIM_Base_SetConfig+0x44>
 8001924:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 8001928:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800192a:	d010      	beq.n	800194e <TIM_Base_SetConfig+0x32>
 800192c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001930:	4290      	cmp	r0, r2
 8001932:	d00c      	beq.n	800194e <TIM_Base_SetConfig+0x32>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001934:	694d      	ldr	r5, [r1, #20]
 8001936:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800193a:	432b      	orrs	r3, r5
  TIMx->ARR = (uint32_t)Structure->Period ;
 800193c:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 800193e:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8001940:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8001942:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001944:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001946:	6282      	str	r2, [r0, #40]	; 0x28
}
 8001948:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 800194a:	6143      	str	r3, [r0, #20]
}
 800194c:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800194e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001954:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001956:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800195c:	4313      	orrs	r3, r2
 800195e:	e7e9      	b.n	8001934 <TIM_Base_SetConfig+0x18>
    tmpcr1 |= Structure->CounterMode;
 8001960:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001966:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001968:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800196a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800196e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001970:	694a      	ldr	r2, [r1, #20]
 8001972:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001976:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001978:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800197a:	688b      	ldr	r3, [r1, #8]
 800197c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800197e:	680b      	ldr	r3, [r1, #0]
 8001980:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001982:	690b      	ldr	r3, [r1, #16]
 8001984:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001986:	2301      	movs	r3, #1
 8001988:	6143      	str	r3, [r0, #20]
 800198a:	4770      	bx	lr
 800198c:	40012c00 	.word	0x40012c00

08001990 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001990:	b350      	cbz	r0, 80019e8 <HAL_TIM_Base_Init+0x58>
{
 8001992:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8001994:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001998:	4604      	mov	r4, r0
 800199a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800199e:	b1f3      	cbz	r3, 80019de <HAL_TIM_Base_Init+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 80019a0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019a2:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80019a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019a8:	f851 0b04 	ldr.w	r0, [r1], #4
 80019ac:	f7ff ffb6 	bl	800191c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019b0:	2301      	movs	r3, #1
 80019b2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019b6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80019ba:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80019be:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80019c2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80019ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80019ce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80019d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80019d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80019da:	2000      	movs	r0, #0
}
 80019dc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80019de:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80019e2:	f7ff f91d 	bl	8000c20 <HAL_TIM_Base_MspInit>
 80019e6:	e7db      	b.n	80019a0 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 80019e8:	2001      	movs	r0, #1
}
 80019ea:	4770      	bx	lr

080019ec <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80019ec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d022      	beq.n	8001a3a <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019f4:	2202      	movs	r2, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80019f6:	6803      	ldr	r3, [r0, #0]
{
 80019f8:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80019fa:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80019fe:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001a00:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a02:	4d0f      	ldr	r5, [pc, #60]	; (8001a40 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8001a04:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001a08:	4322      	orrs	r2, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a0a:	42ab      	cmp	r3, r5
  tmpsmcr = htim->Instance->SMCR;
 8001a0c:	689c      	ldr	r4, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 8001a0e:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a10:	d005      	beq.n	8001a1e <HAL_TIMEx_MasterConfigSynchronization+0x32>
 8001a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a16:	d002      	beq.n	8001a1e <HAL_TIMEx_MasterConfigSynchronization+0x32>
 8001a18:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d104      	bne.n	8001a28 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001a1e:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001a20:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001a24:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001a26:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8001a28:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8001a2a:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8001a2c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8001a30:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  return HAL_OK;
}
 8001a34:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8001a36:	4618      	mov	r0, r3
}
 8001a38:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001a3a:	2002      	movs	r0, #2
}
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	40012c00 	.word	0x40012c00
 8001a44:	40000400 	.word	0x40000400

08001a48 <HAL_TIMEx_CommutCallback>:
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop

08001a4c <HAL_TIMEx_BreakCallback>:
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop

08001a50 <__libc_init_array>:
 8001a50:	b570      	push	{r4, r5, r6, lr}
 8001a52:	2600      	movs	r6, #0
 8001a54:	4d0c      	ldr	r5, [pc, #48]	; (8001a88 <__libc_init_array+0x38>)
 8001a56:	4c0d      	ldr	r4, [pc, #52]	; (8001a8c <__libc_init_array+0x3c>)
 8001a58:	1b64      	subs	r4, r4, r5
 8001a5a:	10a4      	asrs	r4, r4, #2
 8001a5c:	42a6      	cmp	r6, r4
 8001a5e:	d109      	bne.n	8001a74 <__libc_init_array+0x24>
 8001a60:	f000 f822 	bl	8001aa8 <_init>
 8001a64:	2600      	movs	r6, #0
 8001a66:	4d0a      	ldr	r5, [pc, #40]	; (8001a90 <__libc_init_array+0x40>)
 8001a68:	4c0a      	ldr	r4, [pc, #40]	; (8001a94 <__libc_init_array+0x44>)
 8001a6a:	1b64      	subs	r4, r4, r5
 8001a6c:	10a4      	asrs	r4, r4, #2
 8001a6e:	42a6      	cmp	r6, r4
 8001a70:	d105      	bne.n	8001a7e <__libc_init_array+0x2e>
 8001a72:	bd70      	pop	{r4, r5, r6, pc}
 8001a74:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a78:	4798      	blx	r3
 8001a7a:	3601      	adds	r6, #1
 8001a7c:	e7ee      	b.n	8001a5c <__libc_init_array+0xc>
 8001a7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a82:	4798      	blx	r3
 8001a84:	3601      	adds	r6, #1
 8001a86:	e7f2      	b.n	8001a6e <__libc_init_array+0x1e>
 8001a88:	08001ae4 	.word	0x08001ae4
 8001a8c:	08001ae4 	.word	0x08001ae4
 8001a90:	08001ae4 	.word	0x08001ae4
 8001a94:	08001ae8 	.word	0x08001ae8

08001a98 <memset>:
 8001a98:	4603      	mov	r3, r0
 8001a9a:	4402      	add	r2, r0
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d100      	bne.n	8001aa2 <memset+0xa>
 8001aa0:	4770      	bx	lr
 8001aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8001aa6:	e7f9      	b.n	8001a9c <memset+0x4>

08001aa8 <_init>:
 8001aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aaa:	bf00      	nop
 8001aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001aae:	bc08      	pop	{r3}
 8001ab0:	469e      	mov	lr, r3
 8001ab2:	4770      	bx	lr

08001ab4 <_fini>:
 8001ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ab6:	bf00      	nop
 8001ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001aba:	bc08      	pop	{r3}
 8001abc:	469e      	mov	lr, r3
 8001abe:	4770      	bx	lr
